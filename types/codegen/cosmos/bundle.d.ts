import * as _3 from "./auth/v1beta1/auth";
import * as _5 from "./auth/v1beta1/genesis";
import * as _6 from "./auth/v1beta1/query";
import * as _7 from "./base/query/v1beta1/pagination";
import * as _9 from "./base/v1beta1/coin";
import * as _11 from "./base/abci/v1beta1/abci";
import * as _12 from "./base/kv/v1beta1/kv";
import * as _13 from "./base/node/v1beta1/query";
import * as _14 from "./base/reflection/v1beta1/reflection";
import * as _15 from "./base/reflection/v2alpha1/reflection";
import * as _16 from "./base/snapshots/v1beta1/snapshot";
import * as _17 from "./base/store/v1beta1/commit_info";
import * as _18 from "./base/store/v1beta1/listening";
import * as _19 from "./base/tendermint/v1beta1/query";
import * as _21 from "./staking/v1beta1/authz";
import * as _22 from "./staking/v1beta1/genesis";
import * as _23 from "./staking/v1beta1/query";
import * as _24 from "./staking/v1beta1/staking";
import * as _25 from "./staking/v1beta1/tx";
import * as _26 from "./authz/v1beta1/authz";
import * as _27 from "./authz/v1beta1/event";
import * as _28 from "./authz/v1beta1/genesis";
import * as _29 from "./authz/v1beta1/query";
import * as _30 from "./authz/v1beta1/tx";
import * as _31 from "./bank/v1beta1/authz";
import * as _32 from "./bank/v1beta1/bank";
import * as _33 from "./bank/v1beta1/genesis";
import * as _34 from "./bank/v1beta1/query";
import * as _35 from "./bank/v1beta1/tx";
import * as _36 from "./capability/v1beta1/capability";
import * as _37 from "./capability/v1beta1/genesis";
import * as _38 from "./crisis/v1beta1/genesis";
import * as _39 from "./crisis/v1beta1/tx";
import * as _40 from "./crypto/ed25519/keys";
import * as _41 from "./crypto/multisig/keys";
import * as _42 from "./crypto/secp256k1/keys";
import * as _43 from "./crypto/secp256r1/keys";
import * as _44 from "./distribution/v1beta1/distribution";
import * as _45 from "./distribution/v1beta1/genesis";
import * as _46 from "./distribution/v1beta1/query";
import * as _47 from "./distribution/v1beta1/tx";
import * as _48 from "./evidence/v1beta1/evidence";
import * as _49 from "./evidence/v1beta1/genesis";
import * as _50 from "./evidence/v1beta1/query";
import * as _51 from "./evidence/v1beta1/tx";
import * as _52 from "./feegrant/v1beta1/feegrant";
import * as _53 from "./feegrant/v1beta1/genesis";
import * as _54 from "./feegrant/v1beta1/query";
import * as _55 from "./feegrant/v1beta1/tx";
import * as _56 from "./genutil/v1beta1/genesis";
import * as _57 from "./gov/v1beta1/genesis";
import * as _58 from "./gov/v1beta1/gov";
import * as _59 from "./gov/v1beta1/query";
import * as _60 from "./gov/v1beta1/tx";
import * as _61 from "./mint/v1beta1/genesis";
import * as _62 from "./mint/v1beta1/mint";
import * as _63 from "./mint/v1beta1/query";
import * as _64 from "./params/v1beta1/params";
import * as _65 from "./params/v1beta1/query";
import * as _66 from "./slashing/v1beta1/genesis";
import * as _67 from "./slashing/v1beta1/query";
import * as _68 from "./slashing/v1beta1/slashing";
import * as _69 from "./slashing/v1beta1/tx";
import * as _70 from "./tx/signing/v1beta1/signing";
import * as _71 from "./tx/v1beta1/service";
import * as _72 from "./tx/v1beta1/tx";
import * as _73 from "./upgrade/v1beta1/query";
import * as _74 from "./upgrade/v1beta1/upgrade";
import * as _75 from "./vesting/v1beta1/tx";
import * as _76 from "./vesting/v1beta1/vesting";
import * as _170 from "./auth/v1beta1/query.lcd";
import * as _171 from "./authz/v1beta1/query.lcd";
import * as _172 from "./bank/v1beta1/query.lcd";
import * as _173 from "./base/node/v1beta1/query.lcd";
import * as _174 from "./base/tendermint/v1beta1/query.lcd";
import * as _175 from "./distribution/v1beta1/query.lcd";
import * as _176 from "./evidence/v1beta1/query.lcd";
import * as _177 from "./feegrant/v1beta1/query.lcd";
import * as _178 from "./gov/v1beta1/query.lcd";
import * as _179 from "./mint/v1beta1/query.lcd";
import * as _180 from "./params/v1beta1/query.lcd";
import * as _181 from "./slashing/v1beta1/query.lcd";
import * as _182 from "./staking/v1beta1/query.lcd";
import * as _183 from "./tx/v1beta1/service.lcd";
import * as _184 from "./upgrade/v1beta1/query.lcd";
import * as _185 from "./auth/v1beta1/query.rpc.query";
import * as _186 from "./authz/v1beta1/query.rpc.query";
import * as _187 from "./bank/v1beta1/query.rpc.query";
import * as _188 from "./base/node/v1beta1/query.rpc.svc";
import * as _189 from "./base/tendermint/v1beta1/query.rpc.svc";
import * as _190 from "./distribution/v1beta1/query.rpc.query";
import * as _191 from "./evidence/v1beta1/query.rpc.query";
import * as _192 from "./feegrant/v1beta1/query.rpc.query";
import * as _193 from "./gov/v1beta1/query.rpc.query";
import * as _194 from "./mint/v1beta1/query.rpc.query";
import * as _195 from "./params/v1beta1/query.rpc.query";
import * as _196 from "./slashing/v1beta1/query.rpc.query";
import * as _197 from "./staking/v1beta1/query.rpc.query";
import * as _198 from "./tx/v1beta1/service.rpc.svc";
import * as _199 from "./upgrade/v1beta1/query.rpc.query";
import * as _200 from "./authz/v1beta1/tx.rpc.msg";
import * as _201 from "./bank/v1beta1/tx.rpc.msg";
import * as _202 from "./crisis/v1beta1/tx.rpc.msg";
import * as _203 from "./distribution/v1beta1/tx.rpc.msg";
import * as _204 from "./evidence/v1beta1/tx.rpc.msg";
import * as _205 from "./feegrant/v1beta1/tx.rpc.msg";
import * as _206 from "./gov/v1beta1/tx.rpc.msg";
import * as _207 from "./slashing/v1beta1/tx.rpc.msg";
import * as _208 from "./staking/v1beta1/tx.rpc.msg";
import * as _209 from "./vesting/v1beta1/tx.rpc.msg";
export declare namespace cosmos {
    namespace auth {
        const v1beta1: {
            QueryClientImpl: typeof _185.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                accounts(request?: _6.QueryAccountsRequest): Promise<_6.QueryAccountsResponse>;
                account(request: _6.QueryAccountRequest): Promise<_6.QueryAccountResponse>;
                params(request?: _6.QueryParamsRequest): Promise<_6.QueryParamsResponse>;
                moduleAccountByName(request: _6.QueryModuleAccountByNameRequest): Promise<_6.QueryModuleAccountByNameResponse>;
            };
            LCDQueryClient: typeof _170.LCDQueryClient;
            QueryAccountsRequest: {
                encode(message: _6.QueryAccountsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryAccountsRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _6.QueryAccountsRequest;
            };
            QueryAccountsResponse: {
                encode(message: _6.QueryAccountsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryAccountsResponse;
                fromPartial(object: {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _6.QueryAccountsResponse;
            };
            QueryAccountRequest: {
                encode(message: _6.QueryAccountRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryAccountRequest;
                fromPartial(object: {
                    address?: string;
                }): _6.QueryAccountRequest;
            };
            QueryAccountResponse: {
                encode(message: _6.QueryAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryAccountResponse;
                fromPartial(object: {
                    account?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _6.QueryAccountResponse;
            };
            QueryParamsRequest: {
                encode(_: _6.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryParamsRequest;
                fromPartial(_: {}): _6.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _6.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        maxMemoCharacters?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txSigLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txSizeCostPerByte?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sigVerifyCostEd25519?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sigVerifyCostSecp256k1?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _6.QueryParamsResponse;
            };
            QueryModuleAccountByNameRequest: {
                encode(message: _6.QueryModuleAccountByNameRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryModuleAccountByNameRequest;
                fromPartial(object: {
                    name?: string;
                }): _6.QueryModuleAccountByNameRequest;
            };
            QueryModuleAccountByNameResponse: {
                encode(message: _6.QueryModuleAccountByNameResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _6.QueryModuleAccountByNameResponse;
                fromPartial(object: {
                    account?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _6.QueryModuleAccountByNameResponse;
            };
            GenesisState: {
                encode(message: _5.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _5.GenesisState;
                fromPartial(object: {
                    params?: {
                        maxMemoCharacters?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txSigLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txSizeCostPerByte?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sigVerifyCostEd25519?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sigVerifyCostSecp256k1?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _5.GenesisState;
            };
            BaseAccount: {
                encode(message: _3.BaseAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _3.BaseAccount;
                fromPartial(object: {
                    address?: string;
                    pubKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    accountNumber?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    sequence?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _3.BaseAccount;
            };
            ModuleAccount: {
                encode(message: _3.ModuleAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _3.ModuleAccount;
                fromPartial(object: {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    name?: string;
                    permissions?: string[];
                }): _3.ModuleAccount;
            };
            Params: {
                encode(message: _3.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _3.Params;
                fromPartial(object: {
                    maxMemoCharacters?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    txSigLimit?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    txSizeCostPerByte?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    sigVerifyCostEd25519?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    sigVerifyCostSecp256k1?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _3.Params;
            };
        };
    }
    namespace base {
        namespace query {
            const v1beta1: {
                PageRequest: {
                    encode(message: _7.PageRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _7.PageRequest;
                    fromPartial(object: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    }): _7.PageRequest;
                };
                PageResponse: {
                    encode(message: _7.PageResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _7.PageResponse;
                    fromPartial(object: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }): _7.PageResponse;
                };
            };
        }
        const v1beta1: {
            Coin: {
                encode(message: _9.Coin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _9.Coin;
                fromPartial(object: {
                    denom?: string;
                    amount?: string;
                }): _9.Coin;
            };
            DecCoin: {
                encode(message: _9.DecCoin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _9.DecCoin;
                fromPartial(object: {
                    denom?: string;
                    amount?: string;
                }): _9.DecCoin;
            };
            IntProto: {
                encode(message: _9.IntProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _9.IntProto;
                fromPartial(object: {
                    int?: string;
                }): _9.IntProto;
            };
            DecProto: {
                encode(message: _9.DecProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _9.DecProto;
                fromPartial(object: {
                    dec?: string;
                }): _9.DecProto;
            };
        };
        namespace abci {
            const v1beta1: {
                TxResponse: {
                    encode(message: _11.TxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.TxResponse;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }): _11.TxResponse;
                };
                ABCIMessageLog: {
                    encode(message: _11.ABCIMessageLog, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.ABCIMessageLog;
                    fromPartial(object: {
                        msgIndex?: number;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        }[];
                    }): _11.ABCIMessageLog;
                };
                StringEvent: {
                    encode(message: _11.StringEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.StringEvent;
                    fromPartial(object: {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                        }[];
                    }): _11.StringEvent;
                };
                Attribute: {
                    encode(message: _11.Attribute, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.Attribute;
                    fromPartial(object: {
                        key?: string;
                        value?: string;
                    }): _11.Attribute;
                };
                GasInfo: {
                    encode(message: _11.GasInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.GasInfo;
                    fromPartial(object: {
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }): _11.GasInfo;
                };
                Result: {
                    encode(message: _11.Result, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.Result;
                    fromPartial(object: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }): _11.Result;
                };
                SimulationResponse: {
                    encode(message: _11.SimulationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.SimulationResponse;
                    fromPartial(object: {
                        gasInfo?: {
                            gasWanted?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            gasUsed?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        result?: {
                            data?: Uint8Array;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        };
                    }): _11.SimulationResponse;
                };
                MsgData: {
                    encode(message: _11.MsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.MsgData;
                    fromPartial(object: {
                        msgType?: string;
                        data?: Uint8Array;
                    }): _11.MsgData;
                };
                TxMsgData: {
                    encode(message: _11.TxMsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.TxMsgData;
                    fromPartial(object: {
                        data?: {
                            msgType?: string;
                            data?: Uint8Array;
                        }[];
                    }): _11.TxMsgData;
                };
                SearchTxsResult: {
                    encode(message: _11.SearchTxsResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _11.SearchTxsResult;
                    fromPartial(object: {
                        totalCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        count?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        pageNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        pageTotal?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txs?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            gasUsed?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        }[];
                    }): _11.SearchTxsResult;
                };
            };
        }
        namespace kv {
            const v1beta1: {
                Pairs: {
                    encode(message: _12.Pairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _12.Pairs;
                    fromPartial(object: {
                        pairs?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[];
                    }): _12.Pairs;
                };
                Pair: {
                    encode(message: _12.Pair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _12.Pair;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _12.Pair;
                };
            };
        }
        namespace node {
            const v1beta1: {
                QueryClientImpl: typeof _188.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    config(request?: _13.ConfigRequest): Promise<_13.ConfigResponse>;
                };
                LCDQueryClient: typeof _173.LCDQueryClient;
                ConfigRequest: {
                    encode(_: _13.ConfigRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _13.ConfigRequest;
                    fromPartial(_: {}): _13.ConfigRequest;
                };
                ConfigResponse: {
                    encode(message: _13.ConfigResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _13.ConfigResponse;
                    fromPartial(object: {
                        minimumGasPrice?: string;
                    }): _13.ConfigResponse;
                };
            };
        }
        namespace reflection {
            const v1beta1: {
                ListAllInterfacesRequest: {
                    encode(_: _14.ListAllInterfacesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _14.ListAllInterfacesRequest;
                    fromPartial(_: {}): _14.ListAllInterfacesRequest;
                };
                ListAllInterfacesResponse: {
                    encode(message: _14.ListAllInterfacesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _14.ListAllInterfacesResponse;
                    fromPartial(object: {
                        interfaceNames?: string[];
                    }): _14.ListAllInterfacesResponse;
                };
                ListImplementationsRequest: {
                    encode(message: _14.ListImplementationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _14.ListImplementationsRequest;
                    fromPartial(object: {
                        interfaceName?: string;
                    }): _14.ListImplementationsRequest;
                };
                ListImplementationsResponse: {
                    encode(message: _14.ListImplementationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _14.ListImplementationsResponse;
                    fromPartial(object: {
                        implementationMessageNames?: string[];
                    }): _14.ListImplementationsResponse;
                };
            };
            const v2alpha1: {
                AppDescriptor: {
                    encode(message: _15.AppDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.AppDescriptor;
                    fromPartial(object: {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                        chain?: {
                            id?: string;
                        };
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                        configuration?: {
                            bech32AccountAddressPrefix?: string;
                        };
                        queryServices?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    }): _15.AppDescriptor;
                };
                TxDescriptor: {
                    encode(message: _15.TxDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.TxDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        msgs?: {
                            msgTypeUrl?: string;
                        }[];
                    }): _15.TxDescriptor;
                };
                AuthnDescriptor: {
                    encode(message: _15.AuthnDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.AuthnDescriptor;
                    fromPartial(object: {
                        signModes?: {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        }[];
                    }): _15.AuthnDescriptor;
                };
                SigningModeDescriptor: {
                    encode(message: _15.SigningModeDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.SigningModeDescriptor;
                    fromPartial(object: {
                        name?: string;
                        number?: number;
                        authnInfoProviderMethodFullname?: string;
                    }): _15.SigningModeDescriptor;
                };
                ChainDescriptor: {
                    encode(message: _15.ChainDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.ChainDescriptor;
                    fromPartial(object: {
                        id?: string;
                    }): _15.ChainDescriptor;
                };
                CodecDescriptor: {
                    encode(message: _15.CodecDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.CodecDescriptor;
                    fromPartial(object: {
                        interfaces?: {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        }[];
                    }): _15.CodecDescriptor;
                };
                InterfaceDescriptor: {
                    encode(message: _15.InterfaceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.InterfaceDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        interfaceAcceptingMessages?: {
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        }[];
                        interfaceImplementers?: {
                            fullname?: string;
                            typeUrl?: string;
                        }[];
                    }): _15.InterfaceDescriptor;
                };
                InterfaceImplementerDescriptor: {
                    encode(message: _15.InterfaceImplementerDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.InterfaceImplementerDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        typeUrl?: string;
                    }): _15.InterfaceImplementerDescriptor;
                };
                InterfaceAcceptingMessageDescriptor: {
                    encode(message: _15.InterfaceAcceptingMessageDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.InterfaceAcceptingMessageDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        fieldDescriptorNames?: string[];
                    }): _15.InterfaceAcceptingMessageDescriptor;
                };
                ConfigurationDescriptor: {
                    encode(message: _15.ConfigurationDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.ConfigurationDescriptor;
                    fromPartial(object: {
                        bech32AccountAddressPrefix?: string;
                    }): _15.ConfigurationDescriptor;
                };
                MsgDescriptor: {
                    encode(message: _15.MsgDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.MsgDescriptor;
                    fromPartial(object: {
                        msgTypeUrl?: string;
                    }): _15.MsgDescriptor;
                };
                GetAuthnDescriptorRequest: {
                    encode(_: _15.GetAuthnDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetAuthnDescriptorRequest;
                    fromPartial(_: {}): _15.GetAuthnDescriptorRequest;
                };
                GetAuthnDescriptorResponse: {
                    encode(message: _15.GetAuthnDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetAuthnDescriptorResponse;
                    fromPartial(object: {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                    }): _15.GetAuthnDescriptorResponse;
                };
                GetChainDescriptorRequest: {
                    encode(_: _15.GetChainDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetChainDescriptorRequest;
                    fromPartial(_: {}): _15.GetChainDescriptorRequest;
                };
                GetChainDescriptorResponse: {
                    encode(message: _15.GetChainDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetChainDescriptorResponse;
                    fromPartial(object: {
                        chain?: {
                            id?: string;
                        };
                    }): _15.GetChainDescriptorResponse;
                };
                GetCodecDescriptorRequest: {
                    encode(_: _15.GetCodecDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetCodecDescriptorRequest;
                    fromPartial(_: {}): _15.GetCodecDescriptorRequest;
                };
                GetCodecDescriptorResponse: {
                    encode(message: _15.GetCodecDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetCodecDescriptorResponse;
                    fromPartial(object: {
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                    }): _15.GetCodecDescriptorResponse;
                };
                GetConfigurationDescriptorRequest: {
                    encode(_: _15.GetConfigurationDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetConfigurationDescriptorRequest;
                    fromPartial(_: {}): _15.GetConfigurationDescriptorRequest;
                };
                GetConfigurationDescriptorResponse: {
                    encode(message: _15.GetConfigurationDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetConfigurationDescriptorResponse;
                    fromPartial(object: {
                        config?: {
                            bech32AccountAddressPrefix?: string;
                        };
                    }): _15.GetConfigurationDescriptorResponse;
                };
                GetQueryServicesDescriptorRequest: {
                    encode(_: _15.GetQueryServicesDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetQueryServicesDescriptorRequest;
                    fromPartial(_: {}): _15.GetQueryServicesDescriptorRequest;
                };
                GetQueryServicesDescriptorResponse: {
                    encode(message: _15.GetQueryServicesDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetQueryServicesDescriptorResponse;
                    fromPartial(object: {
                        queries?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                    }): _15.GetQueryServicesDescriptorResponse;
                };
                GetTxDescriptorRequest: {
                    encode(_: _15.GetTxDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetTxDescriptorRequest;
                    fromPartial(_: {}): _15.GetTxDescriptorRequest;
                };
                GetTxDescriptorResponse: {
                    encode(message: _15.GetTxDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.GetTxDescriptorResponse;
                    fromPartial(object: {
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    }): _15.GetTxDescriptorResponse;
                };
                QueryServicesDescriptor: {
                    encode(message: _15.QueryServicesDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.QueryServicesDescriptor;
                    fromPartial(object: {
                        queryServices?: {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        }[];
                    }): _15.QueryServicesDescriptor;
                };
                QueryServiceDescriptor: {
                    encode(message: _15.QueryServiceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.QueryServiceDescriptor;
                    fromPartial(object: {
                        fullname?: string;
                        isModule?: boolean;
                        methods?: {
                            name?: string;
                            fullQueryPath?: string;
                        }[];
                    }): _15.QueryServiceDescriptor;
                };
                QueryMethodDescriptor: {
                    encode(message: _15.QueryMethodDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _15.QueryMethodDescriptor;
                    fromPartial(object: {
                        name?: string;
                        fullQueryPath?: string;
                    }): _15.QueryMethodDescriptor;
                };
            };
        }
        namespace snapshots {
            const v1beta1: {
                Snapshot: {
                    encode(message: _16.Snapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.Snapshot;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: {
                            chunkHashes?: Uint8Array[];
                        };
                    }): _16.Snapshot;
                };
                Metadata: {
                    encode(message: _16.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.Metadata;
                    fromPartial(object: {
                        chunkHashes?: Uint8Array[];
                    }): _16.Metadata;
                };
                SnapshotItem: {
                    encode(message: _16.SnapshotItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.SnapshotItem;
                    fromPartial(object: {
                        store?: {
                            name?: string;
                        };
                        iavl?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            version?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            height?: number;
                        };
                        extension?: {
                            name?: string;
                            format?: number;
                        };
                        extensionPayload?: {
                            payload?: Uint8Array;
                        };
                    }): _16.SnapshotItem;
                };
                SnapshotStoreItem: {
                    encode(message: _16.SnapshotStoreItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.SnapshotStoreItem;
                    fromPartial(object: {
                        name?: string;
                    }): _16.SnapshotStoreItem;
                };
                SnapshotIAVLItem: {
                    encode(message: _16.SnapshotIAVLItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.SnapshotIAVLItem;
                    fromPartial(object: {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        height?: number;
                    }): _16.SnapshotIAVLItem;
                };
                SnapshotExtensionMeta: {
                    encode(message: _16.SnapshotExtensionMeta, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.SnapshotExtensionMeta;
                    fromPartial(object: {
                        name?: string;
                        format?: number;
                    }): _16.SnapshotExtensionMeta;
                };
                SnapshotExtensionPayload: {
                    encode(message: _16.SnapshotExtensionPayload, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _16.SnapshotExtensionPayload;
                    fromPartial(object: {
                        payload?: Uint8Array;
                    }): _16.SnapshotExtensionPayload;
                };
            };
        }
        namespace store {
            const v1beta1: {
                StoreKVPair: {
                    encode(message: _18.StoreKVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _18.StoreKVPair;
                    fromPartial(object: {
                        storeKey?: string;
                        delete?: boolean;
                        key?: Uint8Array;
                        value?: Uint8Array;
                    }): _18.StoreKVPair;
                };
                BlockMetadata: {
                    encode(message: _18.BlockMetadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _18.BlockMetadata;
                    fromPartial(object: {
                        requestBeginBlock?: {
                            hash?: Uint8Array;
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            lastCommitInfo?: {
                                round?: number;
                                votes?: {
                                    validator?: {
                                        address?: Uint8Array;
                                        power?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                    };
                                    signedLastBlock?: boolean;
                                }[];
                            };
                            byzantineValidators?: {
                                type?: import("../tendermint/abci/types").EvidenceType;
                                validator?: {
                                    address?: Uint8Array;
                                    power?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                time?: Date;
                                totalVotingPower?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                        };
                        responseBeginBlock?: {
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        };
                        deliverTxs?: {
                            request?: {
                                tx?: Uint8Array;
                            };
                            response?: {
                                code?: number;
                                data?: Uint8Array;
                                log?: string;
                                info?: string;
                                gasWanted?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                gasUsed?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: Uint8Array;
                                        value?: Uint8Array;
                                        index?: boolean;
                                    }[];
                                }[];
                                codespace?: string;
                            };
                        }[];
                        requestEndBlock?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        responseEndBlock?: {
                            validatorUpdates?: {
                                pubKey?: {
                                    ed25519?: Uint8Array;
                                    secp256k1?: Uint8Array;
                                };
                                power?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                            consensusParamUpdates?: {
                                block?: {
                                    maxBytes?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    maxGas?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                evidence?: {
                                    maxAgeNumBlocks?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    maxAgeDuration?: {
                                        seconds?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        nanos?: number;
                                    };
                                    maxBytes?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                validator?: {
                                    pubKeyTypes?: string[];
                                };
                                version?: {
                                    appVersion?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                            };
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        };
                        responseCommit?: {
                            data?: Uint8Array;
                            retainHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }): _18.BlockMetadata;
                };
                BlockMetadata_DeliverTx: {
                    encode(message: _18.BlockMetadata_DeliverTx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _18.BlockMetadata_DeliverTx;
                    fromPartial(object: {
                        request?: {
                            tx?: Uint8Array;
                        };
                        response?: {
                            code?: number;
                            data?: Uint8Array;
                            log?: string;
                            info?: string;
                            gasWanted?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            gasUsed?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                            codespace?: string;
                        };
                    }): _18.BlockMetadata_DeliverTx;
                };
                CommitInfo: {
                    encode(message: _17.CommitInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _17.CommitInfo;
                    fromPartial(object: {
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        storeInfos?: {
                            name?: string;
                            commitId?: {
                                version?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                hash?: Uint8Array;
                            };
                        }[];
                    }): _17.CommitInfo;
                };
                StoreInfo: {
                    encode(message: _17.StoreInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _17.StoreInfo;
                    fromPartial(object: {
                        name?: string;
                        commitId?: {
                            version?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            hash?: Uint8Array;
                        };
                    }): _17.StoreInfo;
                };
                CommitID: {
                    encode(message: _17.CommitID, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _17.CommitID;
                    fromPartial(object: {
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        hash?: Uint8Array;
                    }): _17.CommitID;
                };
            };
        }
        namespace tendermint {
            const v1beta1: {
                QueryClientImpl: typeof _189.QueryClientImpl;
                createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                    getNodeInfo(request?: _19.GetNodeInfoRequest): Promise<_19.GetNodeInfoResponse>;
                    getSyncing(request?: _19.GetSyncingRequest): Promise<_19.GetSyncingResponse>;
                    getLatestBlock(request?: _19.GetLatestBlockRequest): Promise<_19.GetLatestBlockResponse>;
                    getBlockByHeight(request: _19.GetBlockByHeightRequest): Promise<_19.GetBlockByHeightResponse>;
                    getLatestValidatorSet(request?: _19.GetLatestValidatorSetRequest): Promise<_19.GetLatestValidatorSetResponse>;
                    getValidatorSetByHeight(request: _19.GetValidatorSetByHeightRequest): Promise<_19.GetValidatorSetByHeightResponse>;
                };
                LCDQueryClient: typeof _174.LCDQueryClient;
                GetValidatorSetByHeightRequest: {
                    encode(message: _19.GetValidatorSetByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetValidatorSetByHeightRequest;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        pagination?: {
                            key?: Uint8Array;
                            offset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            limit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _19.GetValidatorSetByHeightRequest;
                };
                GetValidatorSetByHeightResponse: {
                    encode(message: _19.GetValidatorSetByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetValidatorSetByHeightResponse;
                    fromPartial(object: {
                        blockHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }): _19.GetValidatorSetByHeightResponse;
                };
                GetLatestValidatorSetRequest: {
                    encode(message: _19.GetLatestValidatorSetRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetLatestValidatorSetRequest;
                    fromPartial(object: {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            limit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    }): _19.GetLatestValidatorSetRequest;
                };
                GetLatestValidatorSetResponse: {
                    encode(message: _19.GetLatestValidatorSetResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetLatestValidatorSetResponse;
                    fromPartial(object: {
                        blockHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            proposerPriority?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }): _19.GetLatestValidatorSetResponse;
                };
                Validator: {
                    encode(message: _19.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.Validator;
                    fromPartial(object: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        votingPower?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        proposerPriority?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }): _19.Validator;
                };
                GetBlockByHeightRequest: {
                    encode(message: _19.GetBlockByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetBlockByHeightRequest;
                    fromPartial(object: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }): _19.GetBlockByHeightRequest;
                };
                GetBlockByHeightResponse: {
                    encode(message: _19.GetBlockByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetBlockByHeightResponse;
                    fromPartial(object: {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        validatorPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long")) => import("long");
                                                            and?: (other: string | number | import("long")) => import("long");
                                                            compare?: (other: string | number | import("long")) => number;
                                                            comp?: (other: string | number | import("long")) => number;
                                                            divide?: (divisor: string | number | import("long")) => import("long");
                                                            div?: (divisor: string | number | import("long")) => import("long");
                                                            equals?: (other: string | number | import("long")) => boolean;
                                                            eq?: (other: string | number | import("long")) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                                            gt?: (other: string | number | import("long")) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            gte?: (other: string | number | import("long")) => boolean;
                                                            ge?: (other: string | number | import("long")) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long")) => boolean;
                                                            lt?: (other: string | number | import("long")) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            lte?: (other: string | number | import("long")) => boolean;
                                                            le?: (other: string | number | import("long")) => boolean;
                                                            modulo?: (other: string | number | import("long")) => import("long");
                                                            mod?: (other: string | number | import("long")) => import("long");
                                                            rem?: (other: string | number | import("long")) => import("long");
                                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                                            negate?: () => import("long");
                                                            neg?: () => import("long");
                                                            not?: () => import("long");
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long")) => boolean;
                                                            neq?: (other: string | number | import("long")) => boolean;
                                                            ne?: (other: string | number | import("long")) => boolean;
                                                            or?: (other: string | number | import("long")) => import("long");
                                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                                            shl?: (numBits: number | import("long")) => import("long");
                                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                                            shr?: (numBits: number | import("long")) => import("long");
                                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                            shru?: (numBits: number | import("long")) => import("long");
                                                            shr_u?: (numBits: number | import("long")) => import("long");
                                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                                            rotl?: (numBits: number | import("long")) => import("long");
                                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                                            rotr?: (numBits: number | import("long")) => import("long");
                                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long");
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long");
                                                            xor?: (other: string | number | import("long")) => import("long");
                                                        };
                                                        app?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long")) => import("long");
                                                            and?: (other: string | number | import("long")) => import("long");
                                                            compare?: (other: string | number | import("long")) => number;
                                                            comp?: (other: string | number | import("long")) => number;
                                                            divide?: (divisor: string | number | import("long")) => import("long");
                                                            div?: (divisor: string | number | import("long")) => import("long");
                                                            equals?: (other: string | number | import("long")) => boolean;
                                                            eq?: (other: string | number | import("long")) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                                            gt?: (other: string | number | import("long")) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            gte?: (other: string | number | import("long")) => boolean;
                                                            ge?: (other: string | number | import("long")) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long")) => boolean;
                                                            lt?: (other: string | number | import("long")) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            lte?: (other: string | number | import("long")) => boolean;
                                                            le?: (other: string | number | import("long")) => boolean;
                                                            modulo?: (other: string | number | import("long")) => import("long");
                                                            mod?: (other: string | number | import("long")) => import("long");
                                                            rem?: (other: string | number | import("long")) => import("long");
                                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                                            negate?: () => import("long");
                                                            neg?: () => import("long");
                                                            not?: () => import("long");
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long")) => boolean;
                                                            neq?: (other: string | number | import("long")) => boolean;
                                                            ne?: (other: string | number | import("long")) => boolean;
                                                            or?: (other: string | number | import("long")) => import("long");
                                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                                            shl?: (numBits: number | import("long")) => import("long");
                                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                                            shr?: (numBits: number | import("long")) => import("long");
                                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                            shru?: (numBits: number | import("long")) => import("long");
                                                            shr_u?: (numBits: number | import("long")) => import("long");
                                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                                            rotl?: (numBits: number | import("long")) => import("long");
                                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                                            rotr?: (numBits: number | import("long")) => import("long");
                                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long");
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long");
                                                            xor?: (other: string | number | import("long")) => import("long");
                                                        };
                                                    };
                                                    chainId?: string;
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                };
                                                totalVotingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                            };
                                        };
                                        commonHeight?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            proposerPriority?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                        }[];
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    }): _19.GetBlockByHeightResponse;
                };
                GetLatestBlockRequest: {
                    encode(_: _19.GetLatestBlockRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetLatestBlockRequest;
                    fromPartial(_: {}): _19.GetLatestBlockRequest;
                };
                GetLatestBlockResponse: {
                    encode(message: _19.GetLatestBlockResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetLatestBlockResponse;
                    fromPartial(object: {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    app?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                };
                                chainId?: string;
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        validatorPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long")) => import("long");
                                                            and?: (other: string | number | import("long")) => import("long");
                                                            compare?: (other: string | number | import("long")) => number;
                                                            comp?: (other: string | number | import("long")) => number;
                                                            divide?: (divisor: string | number | import("long")) => import("long");
                                                            div?: (divisor: string | number | import("long")) => import("long");
                                                            equals?: (other: string | number | import("long")) => boolean;
                                                            eq?: (other: string | number | import("long")) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                                            gt?: (other: string | number | import("long")) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            gte?: (other: string | number | import("long")) => boolean;
                                                            ge?: (other: string | number | import("long")) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long")) => boolean;
                                                            lt?: (other: string | number | import("long")) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            lte?: (other: string | number | import("long")) => boolean;
                                                            le?: (other: string | number | import("long")) => boolean;
                                                            modulo?: (other: string | number | import("long")) => import("long");
                                                            mod?: (other: string | number | import("long")) => import("long");
                                                            rem?: (other: string | number | import("long")) => import("long");
                                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                                            negate?: () => import("long");
                                                            neg?: () => import("long");
                                                            not?: () => import("long");
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long")) => boolean;
                                                            neq?: (other: string | number | import("long")) => boolean;
                                                            ne?: (other: string | number | import("long")) => boolean;
                                                            or?: (other: string | number | import("long")) => import("long");
                                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                                            shl?: (numBits: number | import("long")) => import("long");
                                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                                            shr?: (numBits: number | import("long")) => import("long");
                                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                            shru?: (numBits: number | import("long")) => import("long");
                                                            shr_u?: (numBits: number | import("long")) => import("long");
                                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                                            rotl?: (numBits: number | import("long")) => import("long");
                                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                                            rotr?: (numBits: number | import("long")) => import("long");
                                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long");
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long");
                                                            xor?: (other: string | number | import("long")) => import("long");
                                                        };
                                                        app?: {
                                                            high?: number;
                                                            low?: number;
                                                            unsigned?: boolean;
                                                            add?: (addend: string | number | import("long")) => import("long");
                                                            and?: (other: string | number | import("long")) => import("long");
                                                            compare?: (other: string | number | import("long")) => number;
                                                            comp?: (other: string | number | import("long")) => number;
                                                            divide?: (divisor: string | number | import("long")) => import("long");
                                                            div?: (divisor: string | number | import("long")) => import("long");
                                                            equals?: (other: string | number | import("long")) => boolean;
                                                            eq?: (other: string | number | import("long")) => boolean;
                                                            getHighBits?: () => number;
                                                            getHighBitsUnsigned?: () => number;
                                                            getLowBits?: () => number;
                                                            getLowBitsUnsigned?: () => number;
                                                            getNumBitsAbs?: () => number;
                                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                                            gt?: (other: string | number | import("long")) => boolean;
                                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            gte?: (other: string | number | import("long")) => boolean;
                                                            ge?: (other: string | number | import("long")) => boolean;
                                                            isEven?: () => boolean;
                                                            isNegative?: () => boolean;
                                                            isOdd?: () => boolean;
                                                            isPositive?: () => boolean;
                                                            isZero?: () => boolean;
                                                            eqz?: () => boolean;
                                                            lessThan?: (other: string | number | import("long")) => boolean;
                                                            lt?: (other: string | number | import("long")) => boolean;
                                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                            lte?: (other: string | number | import("long")) => boolean;
                                                            le?: (other: string | number | import("long")) => boolean;
                                                            modulo?: (other: string | number | import("long")) => import("long");
                                                            mod?: (other: string | number | import("long")) => import("long");
                                                            rem?: (other: string | number | import("long")) => import("long");
                                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                                            negate?: () => import("long");
                                                            neg?: () => import("long");
                                                            not?: () => import("long");
                                                            countLeadingZeros?: () => number;
                                                            clz?: () => number;
                                                            countTrailingZeros?: () => number;
                                                            ctz?: () => number;
                                                            notEquals?: (other: string | number | import("long")) => boolean;
                                                            neq?: (other: string | number | import("long")) => boolean;
                                                            ne?: (other: string | number | import("long")) => boolean;
                                                            or?: (other: string | number | import("long")) => import("long");
                                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                                            shl?: (numBits: number | import("long")) => import("long");
                                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                                            shr?: (numBits: number | import("long")) => import("long");
                                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                            shru?: (numBits: number | import("long")) => import("long");
                                                            shr_u?: (numBits: number | import("long")) => import("long");
                                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                                            rotl?: (numBits: number | import("long")) => import("long");
                                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                                            rotr?: (numBits: number | import("long")) => import("long");
                                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                                            toInt?: () => number;
                                                            toNumber?: () => number;
                                                            toBytes?: (le?: boolean) => number[];
                                                            toBytesLE?: () => number[];
                                                            toBytesBE?: () => number[];
                                                            toSigned?: () => import("long");
                                                            toString?: (radix?: number) => string;
                                                            toUnsigned?: () => import("long");
                                                            xor?: (other: string | number | import("long")) => import("long");
                                                        };
                                                    };
                                                    chainId?: string;
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    proposerPriority?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                };
                                                totalVotingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                            };
                                        };
                                        commonHeight?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                            proposerPriority?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                        }[];
                                        totalVotingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    }): _19.GetLatestBlockResponse;
                };
                GetSyncingRequest: {
                    encode(_: _19.GetSyncingRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetSyncingRequest;
                    fromPartial(_: {}): _19.GetSyncingRequest;
                };
                GetSyncingResponse: {
                    encode(message: _19.GetSyncingResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetSyncingResponse;
                    fromPartial(object: {
                        syncing?: boolean;
                    }): _19.GetSyncingResponse;
                };
                GetNodeInfoRequest: {
                    encode(_: _19.GetNodeInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetNodeInfoRequest;
                    fromPartial(_: {}): _19.GetNodeInfoRequest;
                };
                GetNodeInfoResponse: {
                    encode(message: _19.GetNodeInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.GetNodeInfoResponse;
                    fromPartial(object: {
                        defaultNodeInfo?: {
                            protocolVersion?: {
                                p2p?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            };
                            defaultNodeId?: string;
                            listenAddr?: string;
                            network?: string;
                            version?: string;
                            channels?: Uint8Array;
                            moniker?: string;
                            other?: {
                                txIndex?: string;
                                rpcAddress?: string;
                            };
                        };
                        applicationVersion?: {
                            name?: string;
                            appName?: string;
                            version?: string;
                            gitCommit?: string;
                            buildTags?: string;
                            goVersion?: string;
                            buildDeps?: {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[];
                            cosmosSdkVersion?: string;
                        };
                    }): _19.GetNodeInfoResponse;
                };
                VersionInfo: {
                    encode(message: _19.VersionInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.VersionInfo;
                    fromPartial(object: {
                        name?: string;
                        appName?: string;
                        version?: string;
                        gitCommit?: string;
                        buildTags?: string;
                        goVersion?: string;
                        buildDeps?: {
                            path?: string;
                            version?: string;
                            sum?: string;
                        }[];
                        cosmosSdkVersion?: string;
                    }): _19.VersionInfo;
                };
                Module: {
                    encode(message: _19.Module, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _19.Module;
                    fromPartial(object: {
                        path?: string;
                        version?: string;
                        sum?: string;
                    }): _19.Module;
                };
            };
        }
    }
    namespace staking {
        const v1beta1: {
            MsgClientImpl: typeof _208.MsgClientImpl;
            QueryClientImpl: typeof _197.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                validators(request: _23.QueryValidatorsRequest): Promise<_23.QueryValidatorsResponse>;
                validator(request: _23.QueryValidatorRequest): Promise<_23.QueryValidatorResponse>;
                validatorDelegations(request: _23.QueryValidatorDelegationsRequest): Promise<_23.QueryValidatorDelegationsResponse>;
                validatorUnbondingDelegations(request: _23.QueryValidatorUnbondingDelegationsRequest): Promise<_23.QueryValidatorUnbondingDelegationsResponse>;
                delegation(request: _23.QueryDelegationRequest): Promise<_23.QueryDelegationResponse>;
                unbondingDelegation(request: _23.QueryUnbondingDelegationRequest): Promise<_23.QueryUnbondingDelegationResponse>;
                delegatorDelegations(request: _23.QueryDelegatorDelegationsRequest): Promise<_23.QueryDelegatorDelegationsResponse>;
                delegatorUnbondingDelegations(request: _23.QueryDelegatorUnbondingDelegationsRequest): Promise<_23.QueryDelegatorUnbondingDelegationsResponse>;
                redelegations(request: _23.QueryRedelegationsRequest): Promise<_23.QueryRedelegationsResponse>;
                delegatorValidators(request: _23.QueryDelegatorValidatorsRequest): Promise<_23.QueryDelegatorValidatorsResponse>;
                delegatorValidator(request: _23.QueryDelegatorValidatorRequest): Promise<_23.QueryDelegatorValidatorResponse>;
                historicalInfo(request: _23.QueryHistoricalInfoRequest): Promise<_23.QueryHistoricalInfoResponse>;
                pool(request?: _23.QueryPoolRequest): Promise<_23.QueryPoolResponse>;
                params(request?: _23.QueryParamsRequest): Promise<_23.QueryParamsResponse>;
                tokenizeShareRecordById(request: _23.QueryTokenizeShareRecordByIdRequest): Promise<_23.QueryTokenizeShareRecordByIdResponse>;
                tokenizeShareRecordByDenom(request: _23.QueryTokenizeShareRecordByDenomRequest): Promise<_23.QueryTokenizeShareRecordByDenomResponse>;
                tokenizeShareRecordsOwned(request: _23.QueryTokenizeShareRecordsOwnedRequest): Promise<_23.QueryTokenizeShareRecordsOwnedResponse>;
                allTokenizeShareRecords(request?: _23.QueryAllTokenizeShareRecordsRequest): Promise<_23.QueryAllTokenizeShareRecordsResponse>;
                lastTokenizeShareRecordId(request?: _23.QueryLastTokenizeShareRecordIdRequest): Promise<_23.QueryLastTokenizeShareRecordIdResponse>;
                totalTokenizeSharedAssets(request?: _23.QueryTotalTokenizeSharedAssetsRequest): Promise<_23.QueryTotalTokenizeSharedAssetsResponse>;
                totalLiquidStaked(request?: _23.QueryTotalLiquidStaked): Promise<_23.QueryTotalLiquidStakedResponse>;
                tokenizeShareLockInfo(request: _23.QueryTokenizeShareLockInfo): Promise<_23.QueryTokenizeShareLockInfoResponse>;
            };
            LCDQueryClient: typeof _182.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createValidator(value: _25.MsgCreateValidator): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    editValidator(value: _25.MsgEditValidator): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    delegate(value: _25.MsgDelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    beginRedelegate(value: _25.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    undelegate(value: _25.MsgUndelegate): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    unbondValidator(value: _25.MsgUnbondValidator): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    cancelUnbondingDelegation(value: _25.MsgCancelUnbondingDelegation): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    tokenizeShares(value: _25.MsgTokenizeShares): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    redeemTokensForShares(value: _25.MsgRedeemTokensForShares): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    transferTokenizeShareRecord(value: _25.MsgTransferTokenizeShareRecord): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    disableTokenizeShares(value: _25.MsgDisableTokenizeShares): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    enableTokenizeShares(value: _25.MsgEnableTokenizeShares): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    validatorBond(value: _25.MsgValidatorBond): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createValidator(value: _25.MsgCreateValidator): {
                        typeUrl: string;
                        value: _25.MsgCreateValidator;
                    };
                    editValidator(value: _25.MsgEditValidator): {
                        typeUrl: string;
                        value: _25.MsgEditValidator;
                    };
                    delegate(value: _25.MsgDelegate): {
                        typeUrl: string;
                        value: _25.MsgDelegate;
                    };
                    beginRedelegate(value: _25.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _25.MsgBeginRedelegate;
                    };
                    undelegate(value: _25.MsgUndelegate): {
                        typeUrl: string;
                        value: _25.MsgUndelegate;
                    };
                    unbondValidator(value: _25.MsgUnbondValidator): {
                        typeUrl: string;
                        value: _25.MsgUnbondValidator;
                    };
                    cancelUnbondingDelegation(value: _25.MsgCancelUnbondingDelegation): {
                        typeUrl: string;
                        value: _25.MsgCancelUnbondingDelegation;
                    };
                    tokenizeShares(value: _25.MsgTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgTokenizeShares;
                    };
                    redeemTokensForShares(value: _25.MsgRedeemTokensForShares): {
                        typeUrl: string;
                        value: _25.MsgRedeemTokensForShares;
                    };
                    transferTokenizeShareRecord(value: _25.MsgTransferTokenizeShareRecord): {
                        typeUrl: string;
                        value: _25.MsgTransferTokenizeShareRecord;
                    };
                    disableTokenizeShares(value: _25.MsgDisableTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgDisableTokenizeShares;
                    };
                    enableTokenizeShares(value: _25.MsgEnableTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgEnableTokenizeShares;
                    };
                    validatorBond(value: _25.MsgValidatorBond): {
                        typeUrl: string;
                        value: _25.MsgValidatorBond;
                    };
                };
                fromPartial: {
                    createValidator(value: _25.MsgCreateValidator): {
                        typeUrl: string;
                        value: _25.MsgCreateValidator;
                    };
                    editValidator(value: _25.MsgEditValidator): {
                        typeUrl: string;
                        value: _25.MsgEditValidator;
                    };
                    delegate(value: _25.MsgDelegate): {
                        typeUrl: string;
                        value: _25.MsgDelegate;
                    };
                    beginRedelegate(value: _25.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _25.MsgBeginRedelegate;
                    };
                    undelegate(value: _25.MsgUndelegate): {
                        typeUrl: string;
                        value: _25.MsgUndelegate;
                    };
                    unbondValidator(value: _25.MsgUnbondValidator): {
                        typeUrl: string;
                        value: _25.MsgUnbondValidator;
                    };
                    cancelUnbondingDelegation(value: _25.MsgCancelUnbondingDelegation): {
                        typeUrl: string;
                        value: _25.MsgCancelUnbondingDelegation;
                    };
                    tokenizeShares(value: _25.MsgTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgTokenizeShares;
                    };
                    redeemTokensForShares(value: _25.MsgRedeemTokensForShares): {
                        typeUrl: string;
                        value: _25.MsgRedeemTokensForShares;
                    };
                    transferTokenizeShareRecord(value: _25.MsgTransferTokenizeShareRecord): {
                        typeUrl: string;
                        value: _25.MsgTransferTokenizeShareRecord;
                    };
                    disableTokenizeShares(value: _25.MsgDisableTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgDisableTokenizeShares;
                    };
                    enableTokenizeShares(value: _25.MsgEnableTokenizeShares): {
                        typeUrl: string;
                        value: _25.MsgEnableTokenizeShares;
                    };
                    validatorBond(value: _25.MsgValidatorBond): {
                        typeUrl: string;
                        value: _25.MsgValidatorBond;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.staking.v1beta1.MsgCreateValidator": {
                    aminoType: string;
                    toAmino: ({ description, commission, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, value }: _25.MsgCreateValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    }) => _25.MsgCreateValidator;
                };
                "/cosmos.staking.v1beta1.MsgEditValidator": {
                    aminoType: string;
                    toAmino: ({ description, validatorAddress, commissionRate, minSelfDelegation }: _25.MsgEditValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    };
                    fromAmino: ({ description, validator_address, commission_rate, min_self_delegation }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    }) => _25.MsgEditValidator;
                };
                "/cosmos.staking.v1beta1.MsgDelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _25.MsgDelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _25.MsgDelegate;
                };
                "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorSrcAddress, validatorDstAddress, amount }: _25.MsgBeginRedelegate) => {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_src_address, validator_dst_address, amount }: {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _25.MsgBeginRedelegate;
                };
                "/cosmos.staking.v1beta1.MsgUndelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _25.MsgUndelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _25.MsgUndelegate;
                };
                "/cosmos.staking.v1beta1.MsgUnbondValidator": {
                    aminoType: string;
                    toAmino: ({ validatorAddress }: _25.MsgUnbondValidator) => {
                        validator_address: string;
                    };
                    fromAmino: ({ validator_address }: {
                        validator_address: string;
                    }) => _25.MsgUnbondValidator;
                };
                "/cosmos.staking.v1beta1.MsgCancelUnbondingDelegation": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount, creationHeight }: _25.MsgCancelUnbondingDelegation) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                        creation_height: string;
                    };
                    fromAmino: ({ delegator_address, validator_address, amount, creation_height }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                        creation_height: string;
                    }) => _25.MsgCancelUnbondingDelegation;
                };
                "/cosmos.staking.v1beta1.MsgTokenizeShares": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount, tokenizedShareOwner }: _25.MsgTokenizeShares) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                        tokenized_share_owner: string;
                    };
                    fromAmino: ({ delegator_address, validator_address, amount, tokenized_share_owner }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                        tokenized_share_owner: string;
                    }) => _25.MsgTokenizeShares;
                };
                "/cosmos.staking.v1beta1.MsgRedeemTokensForShares": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, amount }: _25.MsgRedeemTokensForShares) => {
                        delegator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, amount }: {
                        delegator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _25.MsgRedeemTokensForShares;
                };
                "/cosmos.staking.v1beta1.MsgTransferTokenizeShareRecord": {
                    aminoType: string;
                    toAmino: ({ tokenizeShareRecordId, sender, newOwner }: _25.MsgTransferTokenizeShareRecord) => {
                        tokenize_share_record_id: string;
                        sender: string;
                        new_owner: string;
                    };
                    fromAmino: ({ tokenize_share_record_id, sender, new_owner }: {
                        tokenize_share_record_id: string;
                        sender: string;
                        new_owner: string;
                    }) => _25.MsgTransferTokenizeShareRecord;
                };
                "/cosmos.staking.v1beta1.MsgDisableTokenizeShares": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress }: _25.MsgDisableTokenizeShares) => {
                        delegator_address: string;
                    };
                    fromAmino: ({ delegator_address }: {
                        delegator_address: string;
                    }) => _25.MsgDisableTokenizeShares;
                };
                "/cosmos.staking.v1beta1.MsgEnableTokenizeShares": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress }: _25.MsgEnableTokenizeShares) => {
                        delegator_address: string;
                    };
                    fromAmino: ({ delegator_address }: {
                        delegator_address: string;
                    }) => _25.MsgEnableTokenizeShares;
                };
                "/cosmos.staking.v1beta1.MsgValidatorBond": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress }: _25.MsgValidatorBond) => {
                        delegator_address: string;
                        validator_address: string;
                    };
                    fromAmino: ({ delegator_address, validator_address }: {
                        delegator_address: string;
                        validator_address: string;
                    }) => _25.MsgValidatorBond;
                };
            };
            MsgCreateValidator: {
                encode(message: _25.MsgCreateValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgCreateValidator;
                fromPartial(object: {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    commission?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    minSelfDelegation?: string;
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    pubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    value?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgCreateValidator;
            };
            MsgCreateValidatorResponse: {
                encode(_: _25.MsgCreateValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgCreateValidatorResponse;
                fromPartial(_: {}): _25.MsgCreateValidatorResponse;
            };
            MsgEditValidator: {
                encode(message: _25.MsgEditValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgEditValidator;
                fromPartial(object: {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    validatorAddress?: string;
                    commissionRate?: string;
                    minSelfDelegation?: string;
                }): _25.MsgEditValidator;
            };
            MsgEditValidatorResponse: {
                encode(_: _25.MsgEditValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgEditValidatorResponse;
                fromPartial(_: {}): _25.MsgEditValidatorResponse;
            };
            MsgDelegate: {
                encode(message: _25.MsgDelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgDelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgDelegate;
            };
            MsgDelegateResponse: {
                encode(_: _25.MsgDelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgDelegateResponse;
                fromPartial(_: {}): _25.MsgDelegateResponse;
            };
            MsgBeginRedelegate: {
                encode(message: _25.MsgBeginRedelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgBeginRedelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgBeginRedelegate;
            };
            MsgBeginRedelegateResponse: {
                encode(message: _25.MsgBeginRedelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgBeginRedelegateResponse;
                fromPartial(object: {
                    completionTime?: Date;
                }): _25.MsgBeginRedelegateResponse;
            };
            MsgUndelegate: {
                encode(message: _25.MsgUndelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgUndelegate;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgUndelegate;
            };
            MsgUndelegateResponse: {
                encode(message: _25.MsgUndelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgUndelegateResponse;
                fromPartial(object: {
                    completionTime?: Date;
                }): _25.MsgUndelegateResponse;
            };
            MsgUnbondValidator: {
                encode(message: _25.MsgUnbondValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgUnbondValidator;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _25.MsgUnbondValidator;
            };
            MsgUnbondValidatorResponse: {
                encode(_: _25.MsgUnbondValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgUnbondValidatorResponse;
                fromPartial(_: {}): _25.MsgUnbondValidatorResponse;
            };
            MsgCancelUnbondingDelegation: {
                encode(message: _25.MsgCancelUnbondingDelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgCancelUnbondingDelegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                    creationHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _25.MsgCancelUnbondingDelegation;
            };
            MsgCancelUnbondingDelegationResponse: {
                encode(_: _25.MsgCancelUnbondingDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgCancelUnbondingDelegationResponse;
                fromPartial(_: {}): _25.MsgCancelUnbondingDelegationResponse;
            };
            MsgTokenizeShares: {
                encode(message: _25.MsgTokenizeShares, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgTokenizeShares;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                    tokenizedShareOwner?: string;
                }): _25.MsgTokenizeShares;
            };
            MsgTokenizeSharesResponse: {
                encode(message: _25.MsgTokenizeSharesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgTokenizeSharesResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgTokenizeSharesResponse;
            };
            MsgRedeemTokensForShares: {
                encode(message: _25.MsgRedeemTokensForShares, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgRedeemTokensForShares;
                fromPartial(object: {
                    delegatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgRedeemTokensForShares;
            };
            MsgRedeemTokensForSharesResponse: {
                encode(message: _25.MsgRedeemTokensForSharesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgRedeemTokensForSharesResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _25.MsgRedeemTokensForSharesResponse;
            };
            MsgTransferTokenizeShareRecord: {
                encode(message: _25.MsgTransferTokenizeShareRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgTransferTokenizeShareRecord;
                fromPartial(object: {
                    tokenizeShareRecordId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    sender?: string;
                    newOwner?: string;
                }): _25.MsgTransferTokenizeShareRecord;
            };
            MsgTransferTokenizeShareRecordResponse: {
                encode(_: _25.MsgTransferTokenizeShareRecordResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgTransferTokenizeShareRecordResponse;
                fromPartial(_: {}): _25.MsgTransferTokenizeShareRecordResponse;
            };
            MsgDisableTokenizeShares: {
                encode(message: _25.MsgDisableTokenizeShares, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgDisableTokenizeShares;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _25.MsgDisableTokenizeShares;
            };
            MsgDisableTokenizeSharesResponse: {
                encode(_: _25.MsgDisableTokenizeSharesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgDisableTokenizeSharesResponse;
                fromPartial(_: {}): _25.MsgDisableTokenizeSharesResponse;
            };
            MsgEnableTokenizeShares: {
                encode(message: _25.MsgEnableTokenizeShares, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgEnableTokenizeShares;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _25.MsgEnableTokenizeShares;
            };
            MsgEnableTokenizeSharesResponse: {
                encode(message: _25.MsgEnableTokenizeSharesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgEnableTokenizeSharesResponse;
                fromPartial(object: {
                    completionTime?: Date;
                }): _25.MsgEnableTokenizeSharesResponse;
            };
            MsgValidatorBond: {
                encode(message: _25.MsgValidatorBond, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgValidatorBond;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _25.MsgValidatorBond;
            };
            MsgValidatorBondResponse: {
                encode(_: _25.MsgValidatorBondResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.MsgValidatorBondResponse;
                fromPartial(_: {}): _25.MsgValidatorBondResponse;
            };
            bondStatusFromJSON(object: any): _24.BondStatus;
            bondStatusToJSON(object: _24.BondStatus): string;
            infractionTypeFromJSON(object: any): _24.InfractionType;
            infractionTypeToJSON(object: _24.InfractionType): string;
            tokenizeShareLockStatusFromJSON(object: any): _24.TokenizeShareLockStatus;
            tokenizeShareLockStatusToJSON(object: _24.TokenizeShareLockStatus): string;
            BondStatus: typeof _24.BondStatus;
            BondStatusSDKType: typeof _24.BondStatusSDKType;
            InfractionType: typeof _24.InfractionType;
            InfractionTypeSDKType: typeof _24.InfractionTypeSDKType;
            TokenizeShareLockStatus: typeof _24.TokenizeShareLockStatus;
            TokenizeShareLockStatusSDKType: typeof _24.TokenizeShareLockStatusSDKType;
            HistoricalInfo: {
                encode(message: _24.HistoricalInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.HistoricalInfo;
                fromPartial(object: {
                    header?: {
                        version?: {
                            block?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            app?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        chainId?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    valset?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    }[];
                }): _24.HistoricalInfo;
            };
            CommissionRates: {
                encode(message: _24.CommissionRates, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.CommissionRates;
                fromPartial(object: {
                    rate?: string;
                    maxRate?: string;
                    maxChangeRate?: string;
                }): _24.CommissionRates;
            };
            Commission: {
                encode(message: _24.Commission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Commission;
                fromPartial(object: {
                    commissionRates?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    updateTime?: Date;
                }): _24.Commission;
            };
            Description: {
                encode(message: _24.Description, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Description;
                fromPartial(object: {
                    moniker?: string;
                    identity?: string;
                    website?: string;
                    securityContact?: string;
                    details?: string;
                }): _24.Description;
            };
            Validator: {
                encode(message: _24.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Validator;
                fromPartial(object: {
                    operatorAddress?: string;
                    consensusPubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    jailed?: boolean;
                    status?: _24.BondStatus;
                    tokens?: string;
                    delegatorShares?: string;
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    unbondingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    unbondingTime?: Date;
                    commission?: {
                        commissionRates?: {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        };
                        updateTime?: Date;
                    };
                    minSelfDelegation?: string;
                    unbondingOnHoldRefCount?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    unbondingIds?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    }[];
                    validatorBondShares?: string;
                    liquidShares?: string;
                }): _24.Validator;
            };
            ValAddresses: {
                encode(message: _24.ValAddresses, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.ValAddresses;
                fromPartial(object: {
                    addresses?: string[];
                }): _24.ValAddresses;
            };
            DVPair: {
                encode(message: _24.DVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.DVPair;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _24.DVPair;
            };
            DVPairs: {
                encode(message: _24.DVPairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.DVPairs;
                fromPartial(object: {
                    pairs?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    }[];
                }): _24.DVPairs;
            };
            DVVTriplet: {
                encode(message: _24.DVVTriplet, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.DVVTriplet;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                }): _24.DVVTriplet;
            };
            DVVTriplets: {
                encode(message: _24.DVVTriplets, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.DVVTriplets;
                fromPartial(object: {
                    triplets?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    }[];
                }): _24.DVVTriplets;
            };
            Delegation: {
                encode(message: _24.Delegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Delegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    shares?: string;
                    validatorBond?: boolean;
                }): _24.Delegation;
            };
            UnbondingDelegation: {
                encode(message: _24.UnbondingDelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.UnbondingDelegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    entries?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                        unbondingId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                }): _24.UnbondingDelegation;
            };
            UnbondingDelegationEntry: {
                encode(message: _24.UnbondingDelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.UnbondingDelegationEntry;
                fromPartial(object: {
                    creationHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    completionTime?: Date;
                    initialBalance?: string;
                    balance?: string;
                    unbondingId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    unbondingOnHoldRefCount?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _24.UnbondingDelegationEntry;
            };
            RedelegationEntry: {
                encode(message: _24.RedelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.RedelegationEntry;
                fromPartial(object: {
                    creationHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    completionTime?: Date;
                    initialBalance?: string;
                    sharesDst?: string;
                    unbondingId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    unbondingOnHoldRefCount?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _24.RedelegationEntry;
            };
            Redelegation: {
                encode(message: _24.Redelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Redelegation;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    entries?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                        unbondingId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                }): _24.Redelegation;
            };
            Params: {
                encode(message: _24.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Params;
                fromPartial(object: {
                    unbondingTime?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        nanos?: number;
                    };
                    maxValidators?: number;
                    maxEntries?: number;
                    historicalEntries?: number;
                    bondDenom?: string;
                    validatorBondFactor?: string;
                    globalLiquidStakingCap?: string;
                    validatorLiquidStakingCap?: string;
                }): _24.Params;
            };
            DelegationResponse: {
                encode(message: _24.DelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.DelegationResponse;
                fromPartial(object: {
                    delegation?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                        validatorBond?: boolean;
                    };
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _24.DelegationResponse;
            };
            RedelegationEntryResponse: {
                encode(message: _24.RedelegationEntryResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.RedelegationEntryResponse;
                fromPartial(object: {
                    redelegationEntry?: {
                        creationHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                        unbondingId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    balance?: string;
                }): _24.RedelegationEntryResponse;
            };
            RedelegationResponse: {
                encode(message: _24.RedelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.RedelegationResponse;
                fromPartial(object: {
                    redelegation?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    };
                    entries?: {
                        redelegationEntry?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        balance?: string;
                    }[];
                }): _24.RedelegationResponse;
            };
            Pool: {
                encode(message: _24.Pool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Pool;
                fromPartial(object: {
                    notBondedTokens?: string;
                    bondedTokens?: string;
                }): _24.Pool;
            };
            ValidatorUpdates: {
                encode(message: _24.ValidatorUpdates, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.ValidatorUpdates;
                fromPartial(object: {
                    updates?: {
                        pubKey?: {
                            ed25519?: Uint8Array;
                            secp256k1?: Uint8Array;
                        };
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                }): _24.ValidatorUpdates;
            };
            TokenizeShareRecord: {
                encode(message: _24.TokenizeShareRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.TokenizeShareRecord;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    owner?: string;
                    moduleAccount?: string;
                    validator?: string;
                }): _24.TokenizeShareRecord;
            };
            PendingTokenizeShareAuthorizations: {
                encode(message: _24.PendingTokenizeShareAuthorizations, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.PendingTokenizeShareAuthorizations;
                fromPartial(object: {
                    addresses?: string[];
                }): _24.PendingTokenizeShareAuthorizations;
            };
            QueryValidatorsRequest: {
                encode(message: _23.QueryValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorsRequest;
                fromPartial(object: {
                    status?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryValidatorsRequest;
            };
            QueryValidatorsResponse: {
                encode(message: _23.QueryValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorsResponse;
                fromPartial(object: {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryValidatorsResponse;
            };
            QueryValidatorRequest: {
                encode(message: _23.QueryValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                }): _23.QueryValidatorRequest;
            };
            QueryValidatorResponse: {
                encode(message: _23.QueryValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorResponse;
                fromPartial(object: {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    };
                }): _23.QueryValidatorResponse;
            };
            QueryValidatorDelegationsRequest: {
                encode(message: _23.QueryValidatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorDelegationsRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryValidatorDelegationsRequest;
            };
            QueryValidatorDelegationsResponse: {
                encode(message: _23.QueryValidatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorDelegationsResponse;
                fromPartial(object: {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                            validatorBond?: boolean;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryValidatorDelegationsResponse;
            };
            QueryValidatorUnbondingDelegationsRequest: {
                encode(message: _23.QueryValidatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorUnbondingDelegationsRequest;
                fromPartial(object: {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryValidatorUnbondingDelegationsRequest;
            };
            QueryValidatorUnbondingDelegationsResponse: {
                encode(message: _23.QueryValidatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryValidatorUnbondingDelegationsResponse;
                fromPartial(object: {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryValidatorUnbondingDelegationsResponse;
            };
            QueryDelegationRequest: {
                encode(message: _23.QueryDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegationRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _23.QueryDelegationRequest;
            };
            QueryDelegationResponse: {
                encode(message: _23.QueryDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegationResponse;
                fromPartial(object: {
                    delegationResponse?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                            validatorBond?: boolean;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    };
                }): _23.QueryDelegationResponse;
            };
            QueryUnbondingDelegationRequest: {
                encode(message: _23.QueryUnbondingDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryUnbondingDelegationRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _23.QueryUnbondingDelegationRequest;
            };
            QueryUnbondingDelegationResponse: {
                encode(message: _23.QueryUnbondingDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryUnbondingDelegationResponse;
                fromPartial(object: {
                    unbond?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    };
                }): _23.QueryUnbondingDelegationResponse;
            };
            QueryDelegatorDelegationsRequest: {
                encode(message: _23.QueryDelegatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorDelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryDelegatorDelegationsRequest;
            };
            QueryDelegatorDelegationsResponse: {
                encode(message: _23.QueryDelegatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorDelegationsResponse;
                fromPartial(object: {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                            validatorBond?: boolean;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryDelegatorDelegationsResponse;
            };
            QueryDelegatorUnbondingDelegationsRequest: {
                encode(message: _23.QueryDelegatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorUnbondingDelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryDelegatorUnbondingDelegationsRequest;
            };
            QueryDelegatorUnbondingDelegationsResponse: {
                encode(message: _23.QueryDelegatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorUnbondingDelegationsResponse;
                fromPartial(object: {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryDelegatorUnbondingDelegationsResponse;
            };
            QueryRedelegationsRequest: {
                encode(message: _23.QueryRedelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryRedelegationsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    srcValidatorAddr?: string;
                    dstValidatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryRedelegationsRequest;
            };
            QueryRedelegationsResponse: {
                encode(message: _23.QueryRedelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryRedelegationsResponse;
                fromPartial(object: {
                    redelegationResponses?: {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                                unbondingId?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                unbondingOnHoldRefCount?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                                unbondingId?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                unbondingOnHoldRefCount?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            };
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryRedelegationsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _23.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorValidatorsRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _23.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorValidatorsResponse;
                fromPartial(object: {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorValidatorRequest: {
                encode(message: _23.QueryDelegatorValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorValidatorRequest;
                fromPartial(object: {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                }): _23.QueryDelegatorValidatorRequest;
            };
            QueryDelegatorValidatorResponse: {
                encode(message: _23.QueryDelegatorValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryDelegatorValidatorResponse;
                fromPartial(object: {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    };
                }): _23.QueryDelegatorValidatorResponse;
            };
            QueryHistoricalInfoRequest: {
                encode(message: _23.QueryHistoricalInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryHistoricalInfoRequest;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _23.QueryHistoricalInfoRequest;
            };
            QueryHistoricalInfoResponse: {
                encode(message: _23.QueryHistoricalInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryHistoricalInfoResponse;
                fromPartial(object: {
                    hist?: {
                        header?: {
                            version?: {
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            };
                            chainId?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        valset?: {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _24.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingIds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            }[];
                            validatorBondShares?: string;
                            liquidShares?: string;
                        }[];
                    };
                }): _23.QueryHistoricalInfoResponse;
            };
            QueryPoolRequest: {
                encode(_: _23.QueryPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryPoolRequest;
                fromPartial(_: {}): _23.QueryPoolRequest;
            };
            QueryPoolResponse: {
                encode(message: _23.QueryPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryPoolResponse;
                fromPartial(object: {
                    pool?: {
                        notBondedTokens?: string;
                        bondedTokens?: string;
                    };
                }): _23.QueryPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _23.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryParamsRequest;
                fromPartial(_: {}): _23.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _23.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        unbondingTime?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        validatorBondFactor?: string;
                        globalLiquidStakingCap?: string;
                        validatorLiquidStakingCap?: string;
                    };
                }): _23.QueryParamsResponse;
            };
            QueryTokenizeShareRecordByIdRequest: {
                encode(message: _23.QueryTokenizeShareRecordByIdRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordByIdRequest;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _23.QueryTokenizeShareRecordByIdRequest;
            };
            QueryTokenizeShareRecordByIdResponse: {
                encode(message: _23.QueryTokenizeShareRecordByIdResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordByIdResponse;
                fromPartial(object: {
                    record?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        owner?: string;
                        moduleAccount?: string;
                        validator?: string;
                    };
                }): _23.QueryTokenizeShareRecordByIdResponse;
            };
            QueryTokenizeShareRecordByDenomRequest: {
                encode(message: _23.QueryTokenizeShareRecordByDenomRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordByDenomRequest;
                fromPartial(object: {
                    denom?: string;
                }): _23.QueryTokenizeShareRecordByDenomRequest;
            };
            QueryTokenizeShareRecordByDenomResponse: {
                encode(message: _23.QueryTokenizeShareRecordByDenomResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordByDenomResponse;
                fromPartial(object: {
                    record?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        owner?: string;
                        moduleAccount?: string;
                        validator?: string;
                    };
                }): _23.QueryTokenizeShareRecordByDenomResponse;
            };
            QueryTokenizeShareRecordsOwnedRequest: {
                encode(message: _23.QueryTokenizeShareRecordsOwnedRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordsOwnedRequest;
                fromPartial(object: {
                    owner?: string;
                }): _23.QueryTokenizeShareRecordsOwnedRequest;
            };
            QueryTokenizeShareRecordsOwnedResponse: {
                encode(message: _23.QueryTokenizeShareRecordsOwnedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareRecordsOwnedResponse;
                fromPartial(object: {
                    records?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        owner?: string;
                        moduleAccount?: string;
                        validator?: string;
                    }[];
                }): _23.QueryTokenizeShareRecordsOwnedResponse;
            };
            QueryAllTokenizeShareRecordsRequest: {
                encode(message: _23.QueryAllTokenizeShareRecordsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryAllTokenizeShareRecordsRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _23.QueryAllTokenizeShareRecordsRequest;
            };
            QueryAllTokenizeShareRecordsResponse: {
                encode(message: _23.QueryAllTokenizeShareRecordsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryAllTokenizeShareRecordsResponse;
                fromPartial(object: {
                    records?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        owner?: string;
                        moduleAccount?: string;
                        validator?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _23.QueryAllTokenizeShareRecordsResponse;
            };
            QueryLastTokenizeShareRecordIdRequest: {
                encode(_: _23.QueryLastTokenizeShareRecordIdRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryLastTokenizeShareRecordIdRequest;
                fromPartial(_: {}): _23.QueryLastTokenizeShareRecordIdRequest;
            };
            QueryLastTokenizeShareRecordIdResponse: {
                encode(message: _23.QueryLastTokenizeShareRecordIdResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryLastTokenizeShareRecordIdResponse;
                fromPartial(object: {
                    id?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _23.QueryLastTokenizeShareRecordIdResponse;
            };
            QueryTotalTokenizeSharedAssetsRequest: {
                encode(_: _23.QueryTotalTokenizeSharedAssetsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTotalTokenizeSharedAssetsRequest;
                fromPartial(_: {}): _23.QueryTotalTokenizeSharedAssetsRequest;
            };
            QueryTotalTokenizeSharedAssetsResponse: {
                encode(message: _23.QueryTotalTokenizeSharedAssetsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTotalTokenizeSharedAssetsResponse;
                fromPartial(object: {
                    value?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _23.QueryTotalTokenizeSharedAssetsResponse;
            };
            QueryTotalLiquidStaked: {
                encode(_: _23.QueryTotalLiquidStaked, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTotalLiquidStaked;
                fromPartial(_: {}): _23.QueryTotalLiquidStaked;
            };
            QueryTotalLiquidStakedResponse: {
                encode(message: _23.QueryTotalLiquidStakedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTotalLiquidStakedResponse;
                fromPartial(object: {
                    tokens?: string;
                }): _23.QueryTotalLiquidStakedResponse;
            };
            QueryTokenizeShareLockInfo: {
                encode(message: _23.QueryTokenizeShareLockInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareLockInfo;
                fromPartial(object: {
                    address?: string;
                }): _23.QueryTokenizeShareLockInfo;
            };
            QueryTokenizeShareLockInfoResponse: {
                encode(message: _23.QueryTokenizeShareLockInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryTokenizeShareLockInfoResponse;
                fromPartial(object: {
                    status?: string;
                    expirationTime?: string;
                }): _23.QueryTokenizeShareLockInfoResponse;
            };
            GenesisState: {
                encode(message: _22.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.GenesisState;
                fromPartial(object: {
                    params?: {
                        unbondingTime?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        validatorBondFactor?: string;
                        globalLiquidStakingCap?: string;
                        validatorLiquidStakingCap?: string;
                    };
                    lastTotalPower?: Uint8Array;
                    lastValidatorPowers?: {
                        address?: string;
                        power?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _24.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                        unbondingOnHoldRefCount?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        unbondingIds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        }[];
                        validatorBondShares?: string;
                        liquidShares?: string;
                    }[];
                    delegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                        validatorBond?: boolean;
                    }[];
                    unbondingDelegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    }[];
                    redelegations?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                            unbondingId?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            unbondingOnHoldRefCount?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    }[];
                    exported?: boolean;
                    tokenizeShareRecords?: {
                        id?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        owner?: string;
                        moduleAccount?: string;
                        validator?: string;
                    }[];
                    lastTokenizeShareRecordId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    totalLiquidStakedTokens?: Uint8Array;
                    tokenizeShareLocks?: {
                        address?: string;
                        status?: string;
                        completionTime?: Date;
                    }[];
                }): _22.GenesisState;
            };
            TokenizeShareLock: {
                encode(message: _22.TokenizeShareLock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.TokenizeShareLock;
                fromPartial(object: {
                    address?: string;
                    status?: string;
                    completionTime?: Date;
                }): _22.TokenizeShareLock;
            };
            LastValidatorPower: {
                encode(message: _22.LastValidatorPower, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.LastValidatorPower;
                fromPartial(object: {
                    address?: string;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _22.LastValidatorPower;
            };
            authorizationTypeFromJSON(object: any): _21.AuthorizationType;
            authorizationTypeToJSON(object: _21.AuthorizationType): string;
            AuthorizationType: typeof _21.AuthorizationType;
            AuthorizationTypeSDKType: typeof _21.AuthorizationTypeSDKType;
            StakeAuthorization: {
                encode(message: _21.StakeAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _21.StakeAuthorization;
                fromPartial(object: {
                    maxTokens?: {
                        denom?: string;
                        amount?: string;
                    };
                    allowList?: {
                        address?: string[];
                    };
                    denyList?: {
                        address?: string[];
                    };
                    authorizationType?: _21.AuthorizationType;
                }): _21.StakeAuthorization;
            };
            StakeAuthorization_Validators: {
                encode(message: _21.StakeAuthorization_Validators, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _21.StakeAuthorization_Validators;
                fromPartial(object: {
                    address?: string[];
                }): _21.StakeAuthorization_Validators;
            };
        };
    }
    namespace authz {
        const v1beta1: {
            MsgClientImpl: typeof _200.MsgClientImpl;
            QueryClientImpl: typeof _186.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                grants(request: _29.QueryGrantsRequest): Promise<_29.QueryGrantsResponse>;
                granterGrants(request: _29.QueryGranterGrantsRequest): Promise<_29.QueryGranterGrantsResponse>;
                granteeGrants(request: _29.QueryGranteeGrantsRequest): Promise<_29.QueryGranteeGrantsResponse>;
            };
            LCDQueryClient: typeof _171.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grant(value: _30.MsgGrant): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    exec(value: _30.MsgExec): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    revoke(value: _30.MsgRevoke): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grant(value: _30.MsgGrant): {
                        typeUrl: string;
                        value: _30.MsgGrant;
                    };
                    exec(value: _30.MsgExec): {
                        typeUrl: string;
                        value: _30.MsgExec;
                    };
                    revoke(value: _30.MsgRevoke): {
                        typeUrl: string;
                        value: _30.MsgRevoke;
                    };
                };
                fromPartial: {
                    grant(value: _30.MsgGrant): {
                        typeUrl: string;
                        value: _30.MsgGrant;
                    };
                    exec(value: _30.MsgExec): {
                        typeUrl: string;
                        value: _30.MsgExec;
                    };
                    revoke(value: _30.MsgRevoke): {
                        typeUrl: string;
                        value: _30.MsgRevoke;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.authz.v1beta1.MsgGrant": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, grant }: _30.MsgGrant) => {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    };
                    fromAmino: ({ granter, grantee, grant }: {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    }) => _30.MsgGrant;
                };
                "/cosmos.authz.v1beta1.MsgExec": {
                    aminoType: string;
                    toAmino: ({ grantee, msgs }: _30.MsgExec) => {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    };
                    fromAmino: ({ grantee, msgs }: {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    }) => _30.MsgExec;
                };
                "/cosmos.authz.v1beta1.MsgRevoke": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, msgTypeUrl }: _30.MsgRevoke) => {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    };
                    fromAmino: ({ granter, grantee, msg_type_url }: {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    }) => _30.MsgRevoke;
                };
            };
            MsgGrant: {
                encode(message: _30.MsgGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgGrant;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    grant?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    };
                }): _30.MsgGrant;
            };
            MsgExecResponse: {
                encode(message: _30.MsgExecResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgExecResponse;
                fromPartial(object: {
                    results?: Uint8Array[];
                }): _30.MsgExecResponse;
            };
            MsgExec: {
                encode(message: _30.MsgExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgExec;
                fromPartial(object: {
                    grantee?: string;
                    msgs?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _30.MsgExec;
            };
            MsgGrantResponse: {
                encode(_: _30.MsgGrantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgGrantResponse;
                fromPartial(_: {}): _30.MsgGrantResponse;
            };
            MsgRevoke: {
                encode(message: _30.MsgRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgRevoke;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                }): _30.MsgRevoke;
            };
            MsgRevokeResponse: {
                encode(_: _30.MsgRevokeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.MsgRevokeResponse;
                fromPartial(_: {}): _30.MsgRevokeResponse;
            };
            QueryGrantsRequest: {
                encode(message: _29.QueryGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGrantsRequest;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _29.QueryGrantsRequest;
            };
            QueryGrantsResponse: {
                encode(message: _29.QueryGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _29.QueryGrantsResponse;
            };
            QueryGranterGrantsRequest: {
                encode(message: _29.QueryGranterGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGranterGrantsRequest;
                fromPartial(object: {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _29.QueryGranterGrantsRequest;
            };
            QueryGranterGrantsResponse: {
                encode(message: _29.QueryGranterGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGranterGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _29.QueryGranterGrantsResponse;
            };
            QueryGranteeGrantsRequest: {
                encode(message: _29.QueryGranteeGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGranteeGrantsRequest;
                fromPartial(object: {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _29.QueryGranteeGrantsRequest;
            };
            QueryGranteeGrantsResponse: {
                encode(message: _29.QueryGranteeGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.QueryGranteeGrantsResponse;
                fromPartial(object: {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _29.QueryGranteeGrantsResponse;
            };
            GenesisState: {
                encode(message: _28.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _28.GenesisState;
                fromPartial(object: {
                    authorization?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                }): _28.GenesisState;
            };
            EventGrant: {
                encode(message: _27.EventGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.EventGrant;
                fromPartial(object: {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                }): _27.EventGrant;
            };
            EventRevoke: {
                encode(message: _27.EventRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.EventRevoke;
                fromPartial(object: {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                }): _27.EventRevoke;
            };
            GenericAuthorization: {
                encode(message: _26.GenericAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.GenericAuthorization;
                fromPartial(object: {
                    msg?: string;
                }): _26.GenericAuthorization;
            };
            Grant: {
                encode(message: _26.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.Grant;
                fromPartial(object: {
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                }): _26.Grant;
            };
            GrantAuthorization: {
                encode(message: _26.GrantAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.GrantAuthorization;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                }): _26.GrantAuthorization;
            };
        };
    }
    namespace bank {
        const v1beta1: {
            MsgClientImpl: typeof _201.MsgClientImpl;
            QueryClientImpl: typeof _187.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                balance(request: _34.QueryBalanceRequest): Promise<_34.QueryBalanceResponse>;
                allBalances(request: _34.QueryAllBalancesRequest): Promise<_34.QueryAllBalancesResponse>;
                spendableBalances(request: _34.QuerySpendableBalancesRequest): Promise<_34.QuerySpendableBalancesResponse>;
                totalSupply(request?: _34.QueryTotalSupplyRequest): Promise<_34.QueryTotalSupplyResponse>;
                supplyOf(request: _34.QuerySupplyOfRequest): Promise<_34.QuerySupplyOfResponse>;
                params(request?: _34.QueryParamsRequest): Promise<_34.QueryParamsResponse>;
                denomMetadata(request: _34.QueryDenomMetadataRequest): Promise<_34.QueryDenomMetadataResponse>;
                denomsMetadata(request?: _34.QueryDenomsMetadataRequest): Promise<_34.QueryDenomsMetadataResponse>;
            };
            LCDQueryClient: typeof _172.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    send(value: _35.MsgSend): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    multiSend(value: _35.MsgMultiSend): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    send(value: _35.MsgSend): {
                        typeUrl: string;
                        value: _35.MsgSend;
                    };
                    multiSend(value: _35.MsgMultiSend): {
                        typeUrl: string;
                        value: _35.MsgMultiSend;
                    };
                };
                fromPartial: {
                    send(value: _35.MsgSend): {
                        typeUrl: string;
                        value: _35.MsgSend;
                    };
                    multiSend(value: _35.MsgMultiSend): {
                        typeUrl: string;
                        value: _35.MsgMultiSend;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.bank.v1beta1.MsgSend": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount }: _35.MsgSend) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, amount }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _35.MsgSend;
                };
                "/cosmos.bank.v1beta1.MsgMultiSend": {
                    aminoType: string;
                    toAmino: ({ inputs, outputs }: _35.MsgMultiSend) => {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    };
                    fromAmino: ({ inputs, outputs }: {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    }) => _35.MsgMultiSend;
                };
            };
            MsgSend: {
                encode(message: _35.MsgSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.MsgSend;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _35.MsgSend;
            };
            MsgSendResponse: {
                encode(_: _35.MsgSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.MsgSendResponse;
                fromPartial(_: {}): _35.MsgSendResponse;
            };
            MsgMultiSend: {
                encode(message: _35.MsgMultiSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.MsgMultiSend;
                fromPartial(object: {
                    inputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    outputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                }): _35.MsgMultiSend;
            };
            MsgMultiSendResponse: {
                encode(_: _35.MsgMultiSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.MsgMultiSendResponse;
                fromPartial(_: {}): _35.MsgMultiSendResponse;
            };
            QueryBalanceRequest: {
                encode(message: _34.QueryBalanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryBalanceRequest;
                fromPartial(object: {
                    address?: string;
                    denom?: string;
                }): _34.QueryBalanceRequest;
            };
            QueryBalanceResponse: {
                encode(message: _34.QueryBalanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryBalanceResponse;
                fromPartial(object: {
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _34.QueryBalanceResponse;
            };
            QueryAllBalancesRequest: {
                encode(message: _34.QueryAllBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryAllBalancesRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _34.QueryAllBalancesRequest;
            };
            QueryAllBalancesResponse: {
                encode(message: _34.QueryAllBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryAllBalancesResponse;
                fromPartial(object: {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _34.QueryAllBalancesResponse;
            };
            QuerySpendableBalancesRequest: {
                encode(message: _34.QuerySpendableBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QuerySpendableBalancesRequest;
                fromPartial(object: {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _34.QuerySpendableBalancesRequest;
            };
            QuerySpendableBalancesResponse: {
                encode(message: _34.QuerySpendableBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QuerySpendableBalancesResponse;
                fromPartial(object: {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _34.QuerySpendableBalancesResponse;
            };
            QueryTotalSupplyRequest: {
                encode(message: _34.QueryTotalSupplyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryTotalSupplyRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _34.QueryTotalSupplyRequest;
            };
            QueryTotalSupplyResponse: {
                encode(message: _34.QueryTotalSupplyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryTotalSupplyResponse;
                fromPartial(object: {
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _34.QueryTotalSupplyResponse;
            };
            QuerySupplyOfRequest: {
                encode(message: _34.QuerySupplyOfRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QuerySupplyOfRequest;
                fromPartial(object: {
                    denom?: string;
                }): _34.QuerySupplyOfRequest;
            };
            QuerySupplyOfResponse: {
                encode(message: _34.QuerySupplyOfResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QuerySupplyOfResponse;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _34.QuerySupplyOfResponse;
            };
            QueryParamsRequest: {
                encode(_: _34.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryParamsRequest;
                fromPartial(_: {}): _34.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _34.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                }): _34.QueryParamsResponse;
            };
            QueryDenomsMetadataRequest: {
                encode(message: _34.QueryDenomsMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryDenomsMetadataRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _34.QueryDenomsMetadataRequest;
            };
            QueryDenomsMetadataResponse: {
                encode(message: _34.QueryDenomsMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryDenomsMetadataResponse;
                fromPartial(object: {
                    metadatas?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _34.QueryDenomsMetadataResponse;
            };
            QueryDenomMetadataRequest: {
                encode(message: _34.QueryDenomMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryDenomMetadataRequest;
                fromPartial(object: {
                    denom?: string;
                }): _34.QueryDenomMetadataRequest;
            };
            QueryDenomMetadataResponse: {
                encode(message: _34.QueryDenomMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.QueryDenomMetadataResponse;
                fromPartial(object: {
                    metadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                    };
                }): _34.QueryDenomMetadataResponse;
            };
            GenesisState: {
                encode(message: _33.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.GenesisState;
                fromPartial(object: {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                    balances?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    denomMetadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                    }[];
                }): _33.GenesisState;
            };
            Balance: {
                encode(message: _33.Balance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Balance;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _33.Balance;
            };
            Params: {
                encode(message: _32.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.Params;
                fromPartial(object: {
                    sendEnabled?: {
                        denom?: string;
                        enabled?: boolean;
                    }[];
                    defaultSendEnabled?: boolean;
                }): _32.Params;
            };
            SendEnabled: {
                encode(message: _32.SendEnabled, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.SendEnabled;
                fromPartial(object: {
                    denom?: string;
                    enabled?: boolean;
                }): _32.SendEnabled;
            };
            Input: {
                encode(message: _32.Input, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.Input;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _32.Input;
            };
            Output: {
                encode(message: _32.Output, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.Output;
                fromPartial(object: {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _32.Output;
            };
            Supply: {
                encode(message: _32.Supply, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.Supply;
                fromPartial(object: {
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _32.Supply;
            };
            DenomUnit: {
                encode(message: _32.DenomUnit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.DenomUnit;
                fromPartial(object: {
                    denom?: string;
                    exponent?: number;
                    aliases?: string[];
                }): _32.DenomUnit;
            };
            Metadata: {
                encode(message: _32.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.Metadata;
                fromPartial(object: {
                    description?: string;
                    denomUnits?: {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    }[];
                    base?: string;
                    display?: string;
                    name?: string;
                    symbol?: string;
                }): _32.Metadata;
            };
            SendAuthorization: {
                encode(message: _31.SendAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.SendAuthorization;
                fromPartial(object: {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _31.SendAuthorization;
            };
        };
    }
    namespace capability {
        const v1beta1: {
            GenesisOwners: {
                encode(message: _37.GenesisOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.GenesisOwners;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    indexOwners?: {
                        owners?: {
                            module?: string;
                            name?: string;
                        }[];
                    };
                }): _37.GenesisOwners;
            };
            GenesisState: {
                encode(message: _37.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.GenesisState;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    owners?: {
                        index?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    }[];
                }): _37.GenesisState;
            };
            Capability: {
                encode(message: _36.Capability, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.Capability;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _36.Capability;
            };
            Owner: {
                encode(message: _36.Owner, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.Owner;
                fromPartial(object: {
                    module?: string;
                    name?: string;
                }): _36.Owner;
            };
            CapabilityOwners: {
                encode(message: _36.CapabilityOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.CapabilityOwners;
                fromPartial(object: {
                    owners?: {
                        module?: string;
                        name?: string;
                    }[];
                }): _36.CapabilityOwners;
            };
        };
    }
    namespace crisis {
        const v1beta1: {
            MsgClientImpl: typeof _202.MsgClientImpl;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    verifyInvariant(value: _39.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    verifyInvariant(value: _39.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _39.MsgVerifyInvariant;
                    };
                };
                fromPartial: {
                    verifyInvariant(value: _39.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _39.MsgVerifyInvariant;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.crisis.v1beta1.MsgVerifyInvariant": {
                    aminoType: string;
                    toAmino: ({ sender, invariantModuleName, invariantRoute }: _39.MsgVerifyInvariant) => {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    };
                    fromAmino: ({ sender, invariant_module_name, invariant_route }: {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    }) => _39.MsgVerifyInvariant;
                };
            };
            MsgVerifyInvariant: {
                encode(message: _39.MsgVerifyInvariant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _39.MsgVerifyInvariant;
                fromPartial(object: {
                    sender?: string;
                    invariantModuleName?: string;
                    invariantRoute?: string;
                }): _39.MsgVerifyInvariant;
            };
            MsgVerifyInvariantResponse: {
                encode(_: _39.MsgVerifyInvariantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _39.MsgVerifyInvariantResponse;
                fromPartial(_: {}): _39.MsgVerifyInvariantResponse;
            };
            GenesisState: {
                encode(message: _38.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _38.GenesisState;
                fromPartial(object: {
                    constantFee?: {
                        denom?: string;
                        amount?: string;
                    };
                }): _38.GenesisState;
            };
        };
    }
    namespace crypto {
        const ed25519: {
            PubKey: {
                encode(message: _40.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _40.PubKey;
            };
            PrivKey: {
                encode(message: _40.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.PrivKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _40.PrivKey;
            };
        };
        const multisig: {
            LegacyAminoPubKey: {
                encode(message: _41.LegacyAminoPubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.LegacyAminoPubKey;
                fromPartial(object: {
                    threshold?: number;
                    publicKeys?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _41.LegacyAminoPubKey;
            };
        };
        const secp256k1: {
            PubKey: {
                encode(message: _42.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _42.PubKey;
            };
            PrivKey: {
                encode(message: _42.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.PrivKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _42.PrivKey;
            };
        };
        const secp256r1: {
            PubKey: {
                encode(message: _43.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _43.PubKey;
                fromPartial(object: {
                    key?: Uint8Array;
                }): _43.PubKey;
            };
            PrivKey: {
                encode(message: _43.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _43.PrivKey;
                fromPartial(object: {
                    secret?: Uint8Array;
                }): _43.PrivKey;
            };
        };
    }
    namespace distribution {
        const v1beta1: {
            MsgClientImpl: typeof _203.MsgClientImpl;
            QueryClientImpl: typeof _190.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _46.QueryParamsRequest): Promise<_46.QueryParamsResponse>;
                validatorOutstandingRewards(request: _46.QueryValidatorOutstandingRewardsRequest): Promise<_46.QueryValidatorOutstandingRewardsResponse>;
                validatorCommission(request: _46.QueryValidatorCommissionRequest): Promise<_46.QueryValidatorCommissionResponse>;
                validatorSlashes(request: _46.QueryValidatorSlashesRequest): Promise<_46.QueryValidatorSlashesResponse>;
                delegationRewards(request: _46.QueryDelegationRewardsRequest): Promise<_46.QueryDelegationRewardsResponse>;
                delegationTotalRewards(request: _46.QueryDelegationTotalRewardsRequest): Promise<_46.QueryDelegationTotalRewardsResponse>;
                delegatorValidators(request: _46.QueryDelegatorValidatorsRequest): Promise<_46.QueryDelegatorValidatorsResponse>;
                delegatorWithdrawAddress(request: _46.QueryDelegatorWithdrawAddressRequest): Promise<_46.QueryDelegatorWithdrawAddressResponse>;
                communityPool(request?: _46.QueryCommunityPoolRequest): Promise<_46.QueryCommunityPoolResponse>;
                tokenizeShareRecordReward(request: _46.QueryTokenizeShareRecordRewardRequest): Promise<_46.QueryTokenizeShareRecordRewardResponse>;
            };
            LCDQueryClient: typeof _175.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    setWithdrawAddress(value: _47.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawDelegatorReward(value: _47.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawValidatorCommission(value: _47.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawTokenizeShareRecordReward(value: _47.MsgWithdrawTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    withdrawAllTokenizeShareRecordReward(value: _47.MsgWithdrawAllTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    fundCommunityPool(value: _47.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    setWithdrawAddress(value: _47.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _47.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _47.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _47.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _47.MsgWithdrawValidatorCommission;
                    };
                    withdrawTokenizeShareRecordReward(value: _47.MsgWithdrawTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawTokenizeShareRecordReward;
                    };
                    withdrawAllTokenizeShareRecordReward(value: _47.MsgWithdrawAllTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawAllTokenizeShareRecordReward;
                    };
                    fundCommunityPool(value: _47.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _47.MsgFundCommunityPool;
                    };
                };
                fromPartial: {
                    setWithdrawAddress(value: _47.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _47.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _47.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _47.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _47.MsgWithdrawValidatorCommission;
                    };
                    withdrawTokenizeShareRecordReward(value: _47.MsgWithdrawTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawTokenizeShareRecordReward;
                    };
                    withdrawAllTokenizeShareRecordReward(value: _47.MsgWithdrawAllTokenizeShareRecordReward): {
                        typeUrl: string;
                        value: _47.MsgWithdrawAllTokenizeShareRecordReward;
                    };
                    fundCommunityPool(value: _47.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _47.MsgFundCommunityPool;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, withdrawAddress }: _47.MsgSetWithdrawAddress) => {
                        delegator_address: string;
                        withdraw_address: string;
                    };
                    fromAmino: ({ delegator_address, withdraw_address }: {
                        delegator_address: string;
                        withdraw_address: string;
                    }) => _47.MsgSetWithdrawAddress;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress }: _47.MsgWithdrawDelegatorReward) => {
                        delegator_address: string;
                        validator_address: string;
                    };
                    fromAmino: ({ delegator_address, validator_address }: {
                        delegator_address: string;
                        validator_address: string;
                    }) => _47.MsgWithdrawDelegatorReward;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission": {
                    aminoType: string;
                    toAmino: ({ validatorAddress }: _47.MsgWithdrawValidatorCommission) => {
                        validator_address: string;
                    };
                    fromAmino: ({ validator_address }: {
                        validator_address: string;
                    }) => _47.MsgWithdrawValidatorCommission;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawTokenizeShareRecordReward": {
                    aminoType: string;
                    toAmino: ({ ownerAddress, recordId }: _47.MsgWithdrawTokenizeShareRecordReward) => {
                        owner_address: string;
                        record_id: string;
                    };
                    fromAmino: ({ owner_address, record_id }: {
                        owner_address: string;
                        record_id: string;
                    }) => _47.MsgWithdrawTokenizeShareRecordReward;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawAllTokenizeShareRecordReward": {
                    aminoType: string;
                    toAmino: ({ ownerAddress }: _47.MsgWithdrawAllTokenizeShareRecordReward) => {
                        owner_address: string;
                    };
                    fromAmino: ({ owner_address }: {
                        owner_address: string;
                    }) => _47.MsgWithdrawAllTokenizeShareRecordReward;
                };
                "/cosmos.distribution.v1beta1.MsgFundCommunityPool": {
                    aminoType: string;
                    toAmino: ({ amount, depositor }: _47.MsgFundCommunityPool) => {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    };
                    fromAmino: ({ amount, depositor }: {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    }) => _47.MsgFundCommunityPool;
                };
            };
            MsgSetWithdrawAddress: {
                encode(message: _47.MsgSetWithdrawAddress, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgSetWithdrawAddress;
                fromPartial(object: {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                }): _47.MsgSetWithdrawAddress;
            };
            MsgSetWithdrawAddressResponse: {
                encode(_: _47.MsgSetWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgSetWithdrawAddressResponse;
                fromPartial(_: {}): _47.MsgSetWithdrawAddressResponse;
            };
            MsgWithdrawDelegatorReward: {
                encode(message: _47.MsgWithdrawDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawDelegatorReward;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _47.MsgWithdrawDelegatorReward;
            };
            MsgWithdrawDelegatorRewardResponse: {
                encode(_: _47.MsgWithdrawDelegatorRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawDelegatorRewardResponse;
                fromPartial(_: {}): _47.MsgWithdrawDelegatorRewardResponse;
            };
            MsgWithdrawValidatorCommission: {
                encode(message: _47.MsgWithdrawValidatorCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawValidatorCommission;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _47.MsgWithdrawValidatorCommission;
            };
            MsgWithdrawValidatorCommissionResponse: {
                encode(_: _47.MsgWithdrawValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawValidatorCommissionResponse;
                fromPartial(_: {}): _47.MsgWithdrawValidatorCommissionResponse;
            };
            MsgWithdrawTokenizeShareRecordReward: {
                encode(message: _47.MsgWithdrawTokenizeShareRecordReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawTokenizeShareRecordReward;
                fromPartial(object: {
                    ownerAddress?: string;
                    recordId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _47.MsgWithdrawTokenizeShareRecordReward;
            };
            MsgWithdrawTokenizeShareRecordRewardResponse: {
                encode(_: _47.MsgWithdrawTokenizeShareRecordRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawTokenizeShareRecordRewardResponse;
                fromPartial(_: {}): _47.MsgWithdrawTokenizeShareRecordRewardResponse;
            };
            MsgWithdrawAllTokenizeShareRecordReward: {
                encode(message: _47.MsgWithdrawAllTokenizeShareRecordReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawAllTokenizeShareRecordReward;
                fromPartial(object: {
                    ownerAddress?: string;
                }): _47.MsgWithdrawAllTokenizeShareRecordReward;
            };
            MsgWithdrawAllTokenizeShareRecordRewardResponse: {
                encode(_: _47.MsgWithdrawAllTokenizeShareRecordRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgWithdrawAllTokenizeShareRecordRewardResponse;
                fromPartial(_: {}): _47.MsgWithdrawAllTokenizeShareRecordRewardResponse;
            };
            MsgFundCommunityPool: {
                encode(message: _47.MsgFundCommunityPool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgFundCommunityPool;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    depositor?: string;
                }): _47.MsgFundCommunityPool;
            };
            MsgFundCommunityPoolResponse: {
                encode(_: _47.MsgFundCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.MsgFundCommunityPoolResponse;
                fromPartial(_: {}): _47.MsgFundCommunityPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _46.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryParamsRequest;
                fromPartial(_: {}): _46.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _46.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                }): _46.QueryParamsResponse;
            };
            QueryValidatorOutstandingRewardsRequest: {
                encode(message: _46.QueryValidatorOutstandingRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorOutstandingRewardsRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _46.QueryValidatorOutstandingRewardsRequest;
            };
            QueryValidatorOutstandingRewardsResponse: {
                encode(message: _46.QueryValidatorOutstandingRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorOutstandingRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _46.QueryValidatorOutstandingRewardsResponse;
            };
            QueryValidatorCommissionRequest: {
                encode(message: _46.QueryValidatorCommissionRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorCommissionRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                }): _46.QueryValidatorCommissionRequest;
            };
            QueryValidatorCommissionResponse: {
                encode(message: _46.QueryValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorCommissionResponse;
                fromPartial(object: {
                    commission?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _46.QueryValidatorCommissionResponse;
            };
            QueryValidatorSlashesRequest: {
                encode(message: _46.QueryValidatorSlashesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorSlashesRequest;
                fromPartial(object: {
                    validatorAddress?: string;
                    startingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    endingHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _46.QueryValidatorSlashesRequest;
            };
            QueryValidatorSlashesResponse: {
                encode(message: _46.QueryValidatorSlashesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryValidatorSlashesResponse;
                fromPartial(object: {
                    slashes?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        fraction?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _46.QueryValidatorSlashesResponse;
            };
            QueryDelegationRewardsRequest: {
                encode(message: _46.QueryDelegationRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegationRewardsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                }): _46.QueryDelegationRewardsRequest;
            };
            QueryDelegationRewardsResponse: {
                encode(message: _46.QueryDelegationRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegationRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _46.QueryDelegationRewardsResponse;
            };
            QueryDelegationTotalRewardsRequest: {
                encode(message: _46.QueryDelegationTotalRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegationTotalRewardsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _46.QueryDelegationTotalRewardsRequest;
            };
            QueryDelegationTotalRewardsResponse: {
                encode(message: _46.QueryDelegationTotalRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegationTotalRewardsResponse;
                fromPartial(object: {
                    rewards?: {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _46.QueryDelegationTotalRewardsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _46.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegatorValidatorsRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _46.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _46.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegatorValidatorsResponse;
                fromPartial(object: {
                    validators?: string[];
                }): _46.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorWithdrawAddressRequest: {
                encode(message: _46.QueryDelegatorWithdrawAddressRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegatorWithdrawAddressRequest;
                fromPartial(object: {
                    delegatorAddress?: string;
                }): _46.QueryDelegatorWithdrawAddressRequest;
            };
            QueryDelegatorWithdrawAddressResponse: {
                encode(message: _46.QueryDelegatorWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryDelegatorWithdrawAddressResponse;
                fromPartial(object: {
                    withdrawAddress?: string;
                }): _46.QueryDelegatorWithdrawAddressResponse;
            };
            QueryCommunityPoolRequest: {
                encode(_: _46.QueryCommunityPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryCommunityPoolRequest;
                fromPartial(_: {}): _46.QueryCommunityPoolRequest;
            };
            QueryCommunityPoolResponse: {
                encode(message: _46.QueryCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryCommunityPoolResponse;
                fromPartial(object: {
                    pool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _46.QueryCommunityPoolResponse;
            };
            QueryTokenizeShareRecordRewardRequest: {
                encode(message: _46.QueryTokenizeShareRecordRewardRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryTokenizeShareRecordRewardRequest;
                fromPartial(object: {
                    ownerAddress?: string;
                }): _46.QueryTokenizeShareRecordRewardRequest;
            };
            QueryTokenizeShareRecordRewardResponse: {
                encode(message: _46.QueryTokenizeShareRecordRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.QueryTokenizeShareRecordRewardResponse;
                fromPartial(object: {
                    rewards?: {
                        recordId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _46.QueryTokenizeShareRecordRewardResponse;
            };
            DelegatorWithdrawInfo: {
                encode(message: _45.DelegatorWithdrawInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.DelegatorWithdrawInfo;
                fromPartial(object: {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                }): _45.DelegatorWithdrawInfo;
            };
            ValidatorOutstandingRewardsRecord: {
                encode(message: _45.ValidatorOutstandingRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.ValidatorOutstandingRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    outstandingRewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _45.ValidatorOutstandingRewardsRecord;
            };
            ValidatorAccumulatedCommissionRecord: {
                encode(message: _45.ValidatorAccumulatedCommissionRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.ValidatorAccumulatedCommissionRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    accumulated?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _45.ValidatorAccumulatedCommissionRecord;
            };
            ValidatorHistoricalRewardsRecord: {
                encode(message: _45.ValidatorHistoricalRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.ValidatorHistoricalRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    rewards?: {
                        cumulativeRewardRatio?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        referenceCount?: number;
                    };
                }): _45.ValidatorHistoricalRewardsRecord;
            };
            ValidatorCurrentRewardsRecord: {
                encode(message: _45.ValidatorCurrentRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.ValidatorCurrentRewardsRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _45.ValidatorCurrentRewardsRecord;
            };
            DelegatorStartingInfoRecord: {
                encode(message: _45.DelegatorStartingInfoRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.DelegatorStartingInfoRecord;
                fromPartial(object: {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    startingInfo?: {
                        previousPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        stake?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _45.DelegatorStartingInfoRecord;
            };
            ValidatorSlashEventRecord: {
                encode(message: _45.ValidatorSlashEventRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.ValidatorSlashEventRecord;
                fromPartial(object: {
                    validatorAddress?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    validatorSlashEvent?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        fraction?: string;
                    };
                }): _45.ValidatorSlashEventRecord;
            };
            GenesisState: {
                encode(message: _45.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GenesisState;
                fromPartial(object: {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                    feePool?: {
                        communityPool?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                    delegatorWithdrawInfos?: {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    }[];
                    previousProposer?: string;
                    outstandingRewards?: {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    validatorAccumulatedCommissions?: {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    }[];
                    validatorHistoricalRewards?: {
                        validatorAddress?: string;
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    }[];
                    validatorCurrentRewards?: {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }[];
                    delegatorStartingInfos?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            stake?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }[];
                    validatorSlashEvents?: {
                        validatorAddress?: string;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        period?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        validatorSlashEvent?: {
                            validatorPeriod?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            fraction?: string;
                        };
                    }[];
                }): _45.GenesisState;
            };
            Params: {
                encode(message: _44.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.Params;
                fromPartial(object: {
                    communityTax?: string;
                    baseProposerReward?: string;
                    bonusProposerReward?: string;
                    withdrawAddrEnabled?: boolean;
                }): _44.Params;
            };
            ValidatorHistoricalRewards: {
                encode(message: _44.ValidatorHistoricalRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorHistoricalRewards;
                fromPartial(object: {
                    cumulativeRewardRatio?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    referenceCount?: number;
                }): _44.ValidatorHistoricalRewards;
            };
            ValidatorCurrentRewards: {
                encode(message: _44.ValidatorCurrentRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorCurrentRewards;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    period?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _44.ValidatorCurrentRewards;
            };
            ValidatorAccumulatedCommission: {
                encode(message: _44.ValidatorAccumulatedCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorAccumulatedCommission;
                fromPartial(object: {
                    commission?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.ValidatorAccumulatedCommission;
            };
            ValidatorOutstandingRewards: {
                encode(message: _44.ValidatorOutstandingRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorOutstandingRewards;
                fromPartial(object: {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.ValidatorOutstandingRewards;
            };
            ValidatorSlashEvent: {
                encode(message: _44.ValidatorSlashEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorSlashEvent;
                fromPartial(object: {
                    validatorPeriod?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    fraction?: string;
                }): _44.ValidatorSlashEvent;
            };
            ValidatorSlashEvents: {
                encode(message: _44.ValidatorSlashEvents, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.ValidatorSlashEvents;
                fromPartial(object: {
                    validatorSlashEvents?: {
                        validatorPeriod?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        fraction?: string;
                    }[];
                }): _44.ValidatorSlashEvents;
            };
            FeePool: {
                encode(message: _44.FeePool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.FeePool;
                fromPartial(object: {
                    communityPool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.FeePool;
            };
            CommunityPoolSpendProposal: {
                encode(message: _44.CommunityPoolSpendProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.CommunityPoolSpendProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.CommunityPoolSpendProposal;
            };
            DelegatorStartingInfo: {
                encode(message: _44.DelegatorStartingInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.DelegatorStartingInfo;
                fromPartial(object: {
                    previousPeriod?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    stake?: string;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _44.DelegatorStartingInfo;
            };
            DelegationDelegatorReward: {
                encode(message: _44.DelegationDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.DelegationDelegatorReward;
                fromPartial(object: {
                    validatorAddress?: string;
                    reward?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.DelegationDelegatorReward;
            };
            TokenizeShareRecordReward: {
                encode(message: _44.TokenizeShareRecordReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.TokenizeShareRecordReward;
                fromPartial(object: {
                    recordId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    reward?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _44.TokenizeShareRecordReward;
            };
            CommunityPoolSpendProposalWithDeposit: {
                encode(message: _44.CommunityPoolSpendProposalWithDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.CommunityPoolSpendProposalWithDeposit;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: string;
                    deposit?: string;
                }): _44.CommunityPoolSpendProposalWithDeposit;
            };
        };
    }
    namespace evidence {
        const v1beta1: {
            MsgClientImpl: typeof _204.MsgClientImpl;
            QueryClientImpl: typeof _191.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                evidence(request: _50.QueryEvidenceRequest): Promise<_50.QueryEvidenceResponse>;
                allEvidence(request?: _50.QueryAllEvidenceRequest): Promise<_50.QueryAllEvidenceResponse>;
            };
            LCDQueryClient: typeof _176.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitEvidence(value: _51.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitEvidence(value: _51.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _51.MsgSubmitEvidence;
                    };
                };
                fromPartial: {
                    submitEvidence(value: _51.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _51.MsgSubmitEvidence;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.evidence.v1beta1.MsgSubmitEvidence": {
                    aminoType: string;
                    toAmino: ({ submitter, evidence }: _51.MsgSubmitEvidence) => {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ submitter, evidence }: {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _51.MsgSubmitEvidence;
                };
            };
            MsgSubmitEvidence: {
                encode(message: _51.MsgSubmitEvidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.MsgSubmitEvidence;
                fromPartial(object: {
                    submitter?: string;
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _51.MsgSubmitEvidence;
            };
            MsgSubmitEvidenceResponse: {
                encode(message: _51.MsgSubmitEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.MsgSubmitEvidenceResponse;
                fromPartial(object: {
                    hash?: Uint8Array;
                }): _51.MsgSubmitEvidenceResponse;
            };
            QueryEvidenceRequest: {
                encode(message: _50.QueryEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.QueryEvidenceRequest;
                fromPartial(object: {
                    evidenceHash?: Uint8Array;
                }): _50.QueryEvidenceRequest;
            };
            QueryEvidenceResponse: {
                encode(message: _50.QueryEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.QueryEvidenceResponse;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _50.QueryEvidenceResponse;
            };
            QueryAllEvidenceRequest: {
                encode(message: _50.QueryAllEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.QueryAllEvidenceRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _50.QueryAllEvidenceRequest;
            };
            QueryAllEvidenceResponse: {
                encode(message: _50.QueryAllEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.QueryAllEvidenceResponse;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _50.QueryAllEvidenceResponse;
            };
            GenesisState: {
                encode(message: _49.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _49.GenesisState;
                fromPartial(object: {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _49.GenesisState;
            };
            Equivocation: {
                encode(message: _48.Equivocation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _48.Equivocation;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    time?: Date;
                    power?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    consensusAddress?: string;
                }): _48.Equivocation;
            };
        };
    }
    namespace feegrant {
        const v1beta1: {
            MsgClientImpl: typeof _205.MsgClientImpl;
            QueryClientImpl: typeof _192.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                allowance(request: _54.QueryAllowanceRequest): Promise<_54.QueryAllowanceResponse>;
                allowances(request: _54.QueryAllowancesRequest): Promise<_54.QueryAllowancesResponse>;
                allowancesByGranter(request: _54.QueryAllowancesByGranterRequest): Promise<_54.QueryAllowancesByGranterResponse>;
            };
            LCDQueryClient: typeof _177.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grantAllowance(value: _55.MsgGrantAllowance): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    revokeAllowance(value: _55.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grantAllowance(value: _55.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _55.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _55.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _55.MsgRevokeAllowance;
                    };
                };
                fromPartial: {
                    grantAllowance(value: _55.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _55.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _55.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _55.MsgRevokeAllowance;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.feegrant.v1beta1.MsgGrantAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, allowance }: _55.MsgGrantAllowance) => {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ granter, grantee, allowance }: {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _55.MsgGrantAllowance;
                };
                "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee }: _55.MsgRevokeAllowance) => {
                        granter: string;
                        grantee: string;
                    };
                    fromAmino: ({ granter, grantee }: {
                        granter: string;
                        grantee: string;
                    }) => _55.MsgRevokeAllowance;
                };
            };
            MsgGrantAllowance: {
                encode(message: _55.MsgGrantAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.MsgGrantAllowance;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _55.MsgGrantAllowance;
            };
            MsgGrantAllowanceResponse: {
                encode(_: _55.MsgGrantAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.MsgGrantAllowanceResponse;
                fromPartial(_: {}): _55.MsgGrantAllowanceResponse;
            };
            MsgRevokeAllowance: {
                encode(message: _55.MsgRevokeAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.MsgRevokeAllowance;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                }): _55.MsgRevokeAllowance;
            };
            MsgRevokeAllowanceResponse: {
                encode(_: _55.MsgRevokeAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.MsgRevokeAllowanceResponse;
                fromPartial(_: {}): _55.MsgRevokeAllowanceResponse;
            };
            QueryAllowanceRequest: {
                encode(message: _54.QueryAllowanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowanceRequest;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                }): _54.QueryAllowanceRequest;
            };
            QueryAllowanceResponse: {
                encode(message: _54.QueryAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowanceResponse;
                fromPartial(object: {
                    allowance?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _54.QueryAllowanceResponse;
            };
            QueryAllowancesRequest: {
                encode(message: _54.QueryAllowancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowancesRequest;
                fromPartial(object: {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _54.QueryAllowancesRequest;
            };
            QueryAllowancesResponse: {
                encode(message: _54.QueryAllowancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowancesResponse;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _54.QueryAllowancesResponse;
            };
            QueryAllowancesByGranterRequest: {
                encode(message: _54.QueryAllowancesByGranterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowancesByGranterRequest;
                fromPartial(object: {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _54.QueryAllowancesByGranterRequest;
            };
            QueryAllowancesByGranterResponse: {
                encode(message: _54.QueryAllowancesByGranterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.QueryAllowancesByGranterResponse;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _54.QueryAllowancesByGranterResponse;
            };
            GenesisState: {
                encode(message: _53.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.GenesisState;
                fromPartial(object: {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                }): _53.GenesisState;
            };
            BasicAllowance: {
                encode(message: _52.BasicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.BasicAllowance;
                fromPartial(object: {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: Date;
                }): _52.BasicAllowance;
            };
            PeriodicAllowance: {
                encode(message: _52.PeriodicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.PeriodicAllowance;
                fromPartial(object: {
                    basic?: {
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: Date;
                    };
                    period?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        nanos?: number;
                    };
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: Date;
                }): _52.PeriodicAllowance;
            };
            AllowedMsgAllowance: {
                encode(message: _52.AllowedMsgAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.AllowedMsgAllowance;
                fromPartial(object: {
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    allowedMessages?: string[];
                }): _52.AllowedMsgAllowance;
            };
            Grant: {
                encode(message: _52.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.Grant;
                fromPartial(object: {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _52.Grant;
            };
        };
    }
    namespace genutil {
        const v1beta1: {
            GenesisState: {
                encode(message: _56.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.GenesisState;
                fromPartial(object: {
                    genTxs?: Uint8Array[];
                }): _56.GenesisState;
            };
        };
    }
    namespace gov {
        const v1beta1: {
            MsgClientImpl: typeof _206.MsgClientImpl;
            QueryClientImpl: typeof _193.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                proposal(request: _59.QueryProposalRequest): Promise<_59.QueryProposalResponse>;
                proposals(request: _59.QueryProposalsRequest): Promise<_59.QueryProposalsResponse>;
                vote(request: _59.QueryVoteRequest): Promise<_59.QueryVoteResponse>;
                votes(request: _59.QueryVotesRequest): Promise<_59.QueryVotesResponse>;
                params(request: _59.QueryParamsRequest): Promise<_59.QueryParamsResponse>;
                deposit(request: _59.QueryDepositRequest): Promise<_59.QueryDepositResponse>;
                deposits(request: _59.QueryDepositsRequest): Promise<_59.QueryDepositsResponse>;
                tallyResult(request: _59.QueryTallyResultRequest): Promise<_59.QueryTallyResultResponse>;
            };
            LCDQueryClient: typeof _178.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitProposal(value: _60.MsgSubmitProposal): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    vote(value: _60.MsgVote): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    voteWeighted(value: _60.MsgVoteWeighted): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                    deposit(value: _60.MsgDeposit): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitProposal(value: _60.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _60.MsgSubmitProposal;
                    };
                    vote(value: _60.MsgVote): {
                        typeUrl: string;
                        value: _60.MsgVote;
                    };
                    voteWeighted(value: _60.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _60.MsgVoteWeighted;
                    };
                    deposit(value: _60.MsgDeposit): {
                        typeUrl: string;
                        value: _60.MsgDeposit;
                    };
                };
                fromPartial: {
                    submitProposal(value: _60.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _60.MsgSubmitProposal;
                    };
                    vote(value: _60.MsgVote): {
                        typeUrl: string;
                        value: _60.MsgVote;
                    };
                    voteWeighted(value: _60.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _60.MsgVoteWeighted;
                    };
                    deposit(value: _60.MsgDeposit): {
                        typeUrl: string;
                        value: _60.MsgDeposit;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.gov.v1beta1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ content, initialDeposit, proposer }: _60.MsgSubmitProposal) => {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    };
                    fromAmino: ({ content, initial_deposit, proposer }: {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    }) => _60.MsgSubmitProposal;
                };
                "/cosmos.gov.v1beta1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option }: _60.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    };
                    fromAmino: ({ proposal_id, voter, option }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    }) => _60.MsgVote;
                };
                "/cosmos.gov.v1beta1.MsgVoteWeighted": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, options }: _60.MsgVoteWeighted) => {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, voter, options }: {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    }) => _60.MsgVoteWeighted;
                };
                "/cosmos.gov.v1beta1.MsgDeposit": {
                    aminoType: string;
                    toAmino: ({ proposalId, depositor, amount }: _60.MsgDeposit) => {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, depositor, amount }: {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _60.MsgDeposit;
                };
            };
            MsgSubmitProposal: {
                encode(message: _60.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgSubmitProposal;
                fromPartial(object: {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    proposer?: string;
                }): _60.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _60.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgSubmitProposalResponse;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _60.MsgSubmitProposalResponse;
            };
            MsgVote: {
                encode(message: _60.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgVote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    voter?: string;
                    option?: _58.VoteOption;
                }): _60.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _60.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgVoteResponse;
                fromPartial(_: {}): _60.MsgVoteResponse;
            };
            MsgVoteWeighted: {
                encode(message: _60.MsgVoteWeighted, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgVoteWeighted;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    voter?: string;
                    options?: {
                        option?: _58.VoteOption;
                        weight?: string;
                    }[];
                }): _60.MsgVoteWeighted;
            };
            MsgVoteWeightedResponse: {
                encode(_: _60.MsgVoteWeightedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgVoteWeightedResponse;
                fromPartial(_: {}): _60.MsgVoteWeightedResponse;
            };
            MsgDeposit: {
                encode(message: _60.MsgDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgDeposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _60.MsgDeposit;
            };
            MsgDepositResponse: {
                encode(_: _60.MsgDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgDepositResponse;
                fromPartial(_: {}): _60.MsgDepositResponse;
            };
            QueryProposalRequest: {
                encode(message: _59.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryProposalRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _59.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _59.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryProposalResponse;
                fromPartial(object: {
                    proposal?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _58.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    };
                }): _59.QueryProposalResponse;
            };
            QueryProposalsRequest: {
                encode(message: _59.QueryProposalsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryProposalsRequest;
                fromPartial(object: {
                    proposalStatus?: _58.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _59.QueryProposalsRequest;
            };
            QueryProposalsResponse: {
                encode(message: _59.QueryProposalsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryProposalsResponse;
                fromPartial(object: {
                    proposals?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _58.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _59.QueryProposalsResponse;
            };
            QueryVoteRequest: {
                encode(message: _59.QueryVoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryVoteRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    voter?: string;
                }): _59.QueryVoteRequest;
            };
            QueryVoteResponse: {
                encode(message: _59.QueryVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryVoteResponse;
                fromPartial(object: {
                    vote?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        voter?: string;
                        option?: _58.VoteOption;
                        options?: {
                            option?: _58.VoteOption;
                            weight?: string;
                        }[];
                    };
                }): _59.QueryVoteResponse;
            };
            QueryVotesRequest: {
                encode(message: _59.QueryVotesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryVotesRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _59.QueryVotesRequest;
            };
            QueryVotesResponse: {
                encode(message: _59.QueryVotesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryVotesResponse;
                fromPartial(object: {
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        voter?: string;
                        option?: _58.VoteOption;
                        options?: {
                            option?: _58.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _59.QueryVotesResponse;
            };
            QueryParamsRequest: {
                encode(message: _59.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryParamsRequest;
                fromPartial(object: {
                    paramsType?: string;
                }): _59.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _59.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryParamsResponse;
                fromPartial(object: {
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                    };
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                }): _59.QueryParamsResponse;
            };
            QueryDepositRequest: {
                encode(message: _59.QueryDepositRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDepositRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    depositor?: string;
                }): _59.QueryDepositRequest;
            };
            QueryDepositResponse: {
                encode(message: _59.QueryDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDepositResponse;
                fromPartial(object: {
                    deposit?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                }): _59.QueryDepositResponse;
            };
            QueryDepositsRequest: {
                encode(message: _59.QueryDepositsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDepositsRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _59.QueryDepositsRequest;
            };
            QueryDepositsResponse: {
                encode(message: _59.QueryDepositsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDepositsResponse;
                fromPartial(object: {
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _59.QueryDepositsResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _59.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryTallyResultRequest;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _59.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _59.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryTallyResultResponse;
                fromPartial(object: {
                    tally?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                }): _59.QueryTallyResultResponse;
            };
            voteOptionFromJSON(object: any): _58.VoteOption;
            voteOptionToJSON(object: _58.VoteOption): string;
            proposalStatusFromJSON(object: any): _58.ProposalStatus;
            proposalStatusToJSON(object: _58.ProposalStatus): string;
            VoteOption: typeof _58.VoteOption;
            VoteOptionSDKType: typeof _58.VoteOptionSDKType;
            ProposalStatus: typeof _58.ProposalStatus;
            ProposalStatusSDKType: typeof _58.ProposalStatusSDKType;
            WeightedVoteOption: {
                encode(message: _58.WeightedVoteOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.WeightedVoteOption;
                fromPartial(object: {
                    option?: _58.VoteOption;
                    weight?: string;
                }): _58.WeightedVoteOption;
            };
            TextProposal: {
                encode(message: _58.TextProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.TextProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                }): _58.TextProposal;
            };
            Deposit: {
                encode(message: _58.Deposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Deposit;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _58.Deposit;
            };
            Proposal: {
                encode(message: _58.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Proposal;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    status?: _58.ProposalStatus;
                    finalTallyResult?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                }): _58.Proposal;
            };
            TallyResult: {
                encode(message: _58.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.TallyResult;
                fromPartial(object: {
                    yes?: string;
                    abstain?: string;
                    no?: string;
                    noWithVeto?: string;
                }): _58.TallyResult;
            };
            Vote: {
                encode(message: _58.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.Vote;
                fromPartial(object: {
                    proposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    voter?: string;
                    option?: _58.VoteOption;
                    options?: {
                        option?: _58.VoteOption;
                        weight?: string;
                    }[];
                }): _58.Vote;
            };
            DepositParams: {
                encode(message: _58.DepositParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.DepositParams;
                fromPartial(object: {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    maxDepositPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        nanos?: number;
                    };
                }): _58.DepositParams;
            };
            VotingParams: {
                encode(message: _58.VotingParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.VotingParams;
                fromPartial(object: {
                    votingPeriod?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        nanos?: number;
                    };
                }): _58.VotingParams;
            };
            TallyParams: {
                encode(message: _58.TallyParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.TallyParams;
                fromPartial(object: {
                    quorum?: Uint8Array;
                    threshold?: Uint8Array;
                    vetoThreshold?: Uint8Array;
                }): _58.TallyParams;
            };
            GenesisState: {
                encode(message: _57.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.GenesisState;
                fromPartial(object: {
                    startingProposalId?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    deposits?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        voter?: string;
                        option?: _58.VoteOption;
                        options?: {
                            option?: _58.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    proposals?: {
                        proposalId?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _58.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                    };
                    votingParams?: {
                        votingPeriod?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                }): _57.GenesisState;
            };
        };
    }
    namespace mint {
        const v1beta1: {
            QueryClientImpl: typeof _194.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _63.QueryParamsRequest): Promise<_63.QueryParamsResponse>;
                inflation(request?: _63.QueryInflationRequest): Promise<_63.QueryInflationResponse>;
                annualProvisions(request?: _63.QueryAnnualProvisionsRequest): Promise<_63.QueryAnnualProvisionsResponse>;
            };
            LCDQueryClient: typeof _179.LCDQueryClient;
            QueryParamsRequest: {
                encode(_: _63.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryParamsRequest;
                fromPartial(_: {}): _63.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _63.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _63.QueryParamsResponse;
            };
            QueryInflationRequest: {
                encode(_: _63.QueryInflationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryInflationRequest;
                fromPartial(_: {}): _63.QueryInflationRequest;
            };
            QueryInflationResponse: {
                encode(message: _63.QueryInflationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryInflationResponse;
                fromPartial(object: {
                    inflation?: Uint8Array;
                }): _63.QueryInflationResponse;
            };
            QueryAnnualProvisionsRequest: {
                encode(_: _63.QueryAnnualProvisionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryAnnualProvisionsRequest;
                fromPartial(_: {}): _63.QueryAnnualProvisionsRequest;
            };
            QueryAnnualProvisionsResponse: {
                encode(message: _63.QueryAnnualProvisionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryAnnualProvisionsResponse;
                fromPartial(object: {
                    annualProvisions?: Uint8Array;
                }): _63.QueryAnnualProvisionsResponse;
            };
            Minter: {
                encode(message: _62.Minter, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.Minter;
                fromPartial(object: {
                    inflation?: string;
                    annualProvisions?: string;
                }): _62.Minter;
            };
            Params: {
                encode(message: _62.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.Params;
                fromPartial(object: {
                    mintDenom?: string;
                    inflationRateChange?: string;
                    inflationMax?: string;
                    inflationMin?: string;
                    goalBonded?: string;
                    blocksPerYear?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _62.Params;
            };
            GenesisState: {
                encode(message: _61.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.GenesisState;
                fromPartial(object: {
                    minter?: {
                        inflation?: string;
                        annualProvisions?: string;
                    };
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _61.GenesisState;
            };
        };
    }
    namespace params {
        const v1beta1: {
            QueryClientImpl: typeof _195.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request: _65.QueryParamsRequest): Promise<_65.QueryParamsResponse>;
            };
            LCDQueryClient: typeof _180.LCDQueryClient;
            QueryParamsRequest: {
                encode(message: _65.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.QueryParamsRequest;
                fromPartial(object: {
                    subspace?: string;
                    key?: string;
                }): _65.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _65.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.QueryParamsResponse;
                fromPartial(object: {
                    param?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    };
                }): _65.QueryParamsResponse;
            };
            ParameterChangeProposal: {
                encode(message: _64.ParameterChangeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.ParameterChangeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    changes?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    }[];
                }): _64.ParameterChangeProposal;
            };
            ParamChange: {
                encode(message: _64.ParamChange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.ParamChange;
                fromPartial(object: {
                    subspace?: string;
                    key?: string;
                    value?: string;
                }): _64.ParamChange;
            };
        };
    }
    namespace slashing {
        const v1beta1: {
            MsgClientImpl: typeof _207.MsgClientImpl;
            QueryClientImpl: typeof _196.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                params(request?: _67.QueryParamsRequest): Promise<_67.QueryParamsResponse>;
                signingInfo(request: _67.QuerySigningInfoRequest): Promise<_67.QuerySigningInfoResponse>;
                signingInfos(request?: _67.QuerySigningInfosRequest): Promise<_67.QuerySigningInfosResponse>;
            };
            LCDQueryClient: typeof _181.LCDQueryClient;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    unjail(value: _69.MsgUnjail): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    unjail(value: _69.MsgUnjail): {
                        typeUrl: string;
                        value: _69.MsgUnjail;
                    };
                };
                fromPartial: {
                    unjail(value: _69.MsgUnjail): {
                        typeUrl: string;
                        value: _69.MsgUnjail;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.slashing.v1beta1.MsgUnjail": {
                    aminoType: string;
                    toAmino: ({ validatorAddr }: _69.MsgUnjail) => {
                        validator_addr: string;
                    };
                    fromAmino: ({ validator_addr }: {
                        validator_addr: string;
                    }) => _69.MsgUnjail;
                };
            };
            MsgUnjail: {
                encode(message: _69.MsgUnjail, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _69.MsgUnjail;
                fromPartial(object: {
                    validatorAddr?: string;
                }): _69.MsgUnjail;
            };
            MsgUnjailResponse: {
                encode(_: _69.MsgUnjailResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _69.MsgUnjailResponse;
                fromPartial(_: {}): _69.MsgUnjailResponse;
            };
            ValidatorSigningInfo: {
                encode(message: _68.ValidatorSigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.ValidatorSigningInfo;
                fromPartial(object: {
                    address?: string;
                    startHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    indexOffset?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    jailedUntil?: Date;
                    tombstoned?: boolean;
                    missedBlocksCounter?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _68.ValidatorSigningInfo;
            };
            Params: {
                encode(message: _68.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.Params;
                fromPartial(object: {
                    signedBlocksWindow?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    minSignedPerWindow?: Uint8Array;
                    downtimeJailDuration?: {
                        seconds?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        nanos?: number;
                    };
                    slashFractionDoubleSign?: Uint8Array;
                    slashFractionDowntime?: Uint8Array;
                }): _68.Params;
            };
            QueryParamsRequest: {
                encode(_: _67.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryParamsRequest;
                fromPartial(_: {}): _67.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _67.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryParamsResponse;
                fromPartial(object: {
                    params?: {
                        signedBlocksWindow?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                }): _67.QueryParamsResponse;
            };
            QuerySigningInfoRequest: {
                encode(message: _67.QuerySigningInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QuerySigningInfoRequest;
                fromPartial(object: {
                    consAddress?: string;
                }): _67.QuerySigningInfoRequest;
            };
            QuerySigningInfoResponse: {
                encode(message: _67.QuerySigningInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QuerySigningInfoResponse;
                fromPartial(object: {
                    valSigningInfo?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _67.QuerySigningInfoResponse;
            };
            QuerySigningInfosRequest: {
                encode(message: _67.QuerySigningInfosRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QuerySigningInfosRequest;
                fromPartial(object: {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _67.QuerySigningInfosRequest;
            };
            QuerySigningInfosResponse: {
                encode(message: _67.QuerySigningInfosResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QuerySigningInfosResponse;
                fromPartial(object: {
                    info?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _67.QuerySigningInfosResponse;
            };
            GenesisState: {
                encode(message: _66.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GenesisState;
                fromPartial(object: {
                    params?: {
                        signedBlocksWindow?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: {
                            seconds?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            nanos?: number;
                        };
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                    signingInfos?: {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            indexOffset?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                    }[];
                    missedBlocks?: {
                        address?: string;
                        missedBlocks?: {
                            index?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            missed?: boolean;
                        }[];
                    }[];
                }): _66.GenesisState;
            };
            SigningInfo: {
                encode(message: _66.SigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.SigningInfo;
                fromPartial(object: {
                    address?: string;
                    validatorSigningInfo?: {
                        address?: string;
                        startHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        indexOffset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _66.SigningInfo;
            };
            ValidatorMissedBlocks: {
                encode(message: _66.ValidatorMissedBlocks, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.ValidatorMissedBlocks;
                fromPartial(object: {
                    address?: string;
                    missedBlocks?: {
                        index?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        missed?: boolean;
                    }[];
                }): _66.ValidatorMissedBlocks;
            };
            MissedBlock: {
                encode(message: _66.MissedBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.MissedBlock;
                fromPartial(object: {
                    index?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    missed?: boolean;
                }): _66.MissedBlock;
            };
        };
    }
    namespace tx {
        namespace signing {
            const v1beta1: {
                signModeFromJSON(object: any): _70.SignMode;
                signModeToJSON(object: _70.SignMode): string;
                SignMode: typeof _70.SignMode;
                SignModeSDKType: typeof _70.SignModeSDKType;
                SignatureDescriptors: {
                    encode(message: _70.SignatureDescriptors, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.SignatureDescriptors;
                    fromPartial(object: {
                        signatures?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _70.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                    }): _70.SignatureDescriptors;
                };
                SignatureDescriptor: {
                    encode(message: _70.SignatureDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.SignatureDescriptor;
                    fromPartial(object: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        data?: {
                            single?: {
                                mode?: _70.SignMode;
                                signature?: Uint8Array;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            };
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }): _70.SignatureDescriptor;
                };
                SignatureDescriptor_Data: {
                    encode(message: _70.SignatureDescriptor_Data, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.SignatureDescriptor_Data;
                    fromPartial(object: {
                        single?: {
                            mode?: _70.SignMode;
                            signature?: Uint8Array;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            signatures?: any[];
                        };
                    }): _70.SignatureDescriptor_Data;
                };
                SignatureDescriptor_Data_Single: {
                    encode(message: _70.SignatureDescriptor_Data_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.SignatureDescriptor_Data_Single;
                    fromPartial(object: {
                        mode?: _70.SignMode;
                        signature?: Uint8Array;
                    }): _70.SignatureDescriptor_Data_Single;
                };
                SignatureDescriptor_Data_Multi: {
                    encode(message: _70.SignatureDescriptor_Data_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.SignatureDescriptor_Data_Multi;
                    fromPartial(object: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        signatures?: any[];
                    }): _70.SignatureDescriptor_Data_Multi;
                };
            };
        }
        const v1beta1: {
            QueryClientImpl: typeof _198.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                simulate(request: _71.SimulateRequest): Promise<_71.SimulateResponse>;
                getTx(request: _71.GetTxRequest): Promise<_71.GetTxResponse>;
                broadcastTx(request: _71.BroadcastTxRequest): Promise<_71.BroadcastTxResponse>;
                getTxsEvent(request: _71.GetTxsEventRequest): Promise<_71.GetTxsEventResponse>;
                getBlockWithTxs(request: _71.GetBlockWithTxsRequest): Promise<_71.GetBlockWithTxsResponse>;
            };
            LCDQueryClient: typeof _183.LCDQueryClient;
            Tx: {
                encode(message: _72.Tx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.Tx;
                fromPartial(object: {
                    body?: {
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        memo?: string;
                        timeoutHeight?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        extensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        nonCriticalExtensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                    authInfo?: {
                        signerInfos?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _70.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        }[];
                        fee?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            gasLimit?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            payer?: string;
                            granter?: string;
                        };
                    };
                    signatures?: Uint8Array[];
                }): _72.Tx;
            };
            TxRaw: {
                encode(message: _72.TxRaw, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.TxRaw;
                fromPartial(object: {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    signatures?: Uint8Array[];
                }): _72.TxRaw;
            };
            SignDoc: {
                encode(message: _72.SignDoc, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.SignDoc;
                fromPartial(object: {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    chainId?: string;
                    accountNumber?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _72.SignDoc;
            };
            TxBody: {
                encode(message: _72.TxBody, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.TxBody;
                fromPartial(object: {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    memo?: string;
                    timeoutHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    extensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    nonCriticalExtensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                }): _72.TxBody;
            };
            AuthInfo: {
                encode(message: _72.AuthInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.AuthInfo;
                fromPartial(object: {
                    signerInfos?: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _70.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                    fee?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        gasLimit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        payer?: string;
                        granter?: string;
                    };
                }): _72.AuthInfo;
            };
            SignerInfo: {
                encode(message: _72.SignerInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.SignerInfo;
                fromPartial(object: {
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    modeInfo?: {
                        single?: {
                            mode?: _70.SignMode;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        };
                    };
                    sequence?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _72.SignerInfo;
            };
            ModeInfo: {
                encode(message: _72.ModeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.ModeInfo;
                fromPartial(object: {
                    single?: {
                        mode?: _70.SignMode;
                    };
                    multi?: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        modeInfos?: any[];
                    };
                }): _72.ModeInfo;
            };
            ModeInfo_Single: {
                encode(message: _72.ModeInfo_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.ModeInfo_Single;
                fromPartial(object: {
                    mode?: _70.SignMode;
                }): _72.ModeInfo_Single;
            };
            ModeInfo_Multi: {
                encode(message: _72.ModeInfo_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.ModeInfo_Multi;
                fromPartial(object: {
                    bitarray?: {
                        extraBitsStored?: number;
                        elems?: Uint8Array;
                    };
                    modeInfos?: any[];
                }): _72.ModeInfo_Multi;
            };
            Fee: {
                encode(message: _72.Fee, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.Fee;
                fromPartial(object: {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    gasLimit?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    payer?: string;
                    granter?: string;
                }): _72.Fee;
            };
            orderByFromJSON(object: any): _71.OrderBy;
            orderByToJSON(object: _71.OrderBy): string;
            broadcastModeFromJSON(object: any): _71.BroadcastMode;
            broadcastModeToJSON(object: _71.BroadcastMode): string;
            OrderBy: typeof _71.OrderBy;
            OrderBySDKType: typeof _71.OrderBySDKType;
            BroadcastMode: typeof _71.BroadcastMode;
            BroadcastModeSDKType: typeof _71.BroadcastModeSDKType;
            GetTxsEventRequest: {
                encode(message: _71.GetTxsEventRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetTxsEventRequest;
                fromPartial(object: {
                    events?: string[];
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                    orderBy?: _71.OrderBy;
                }): _71.GetTxsEventRequest;
            };
            GetTxsEventResponse: {
                encode(message: _71.GetTxsEventResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetTxsEventResponse;
                fromPartial(object: {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _70.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                payer?: string;
                                granter?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    txResponses?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _71.GetTxsEventResponse;
            };
            BroadcastTxRequest: {
                encode(message: _71.BroadcastTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.BroadcastTxRequest;
                fromPartial(object: {
                    txBytes?: Uint8Array;
                    mode?: _71.BroadcastMode;
                }): _71.BroadcastTxRequest;
            };
            BroadcastTxResponse: {
                encode(message: _71.BroadcastTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.BroadcastTxResponse;
                fromPartial(object: {
                    txResponse?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                }): _71.BroadcastTxResponse;
            };
            SimulateRequest: {
                encode(message: _71.SimulateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.SimulateRequest;
                fromPartial(object: {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _70.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                payer?: string;
                                granter?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txBytes?: Uint8Array;
                }): _71.SimulateRequest;
            };
            SimulateResponse: {
                encode(message: _71.SimulateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.SimulateResponse;
                fromPartial(object: {
                    gasInfo?: {
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    result?: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                }): _71.SimulateResponse;
            };
            GetTxRequest: {
                encode(message: _71.GetTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetTxRequest;
                fromPartial(object: {
                    hash?: string;
                }): _71.GetTxRequest;
            };
            GetTxResponse: {
                encode(message: _71.GetTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetTxResponse;
                fromPartial(object: {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _70.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                payer?: string;
                                granter?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txResponse?: {
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        gasUsed?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                }): _71.GetTxResponse;
            };
            GetBlockWithTxsRequest: {
                encode(message: _71.GetBlockWithTxsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetBlockWithTxsRequest;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    pagination?: {
                        key?: Uint8Array;
                        offset?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        limit?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                }): _71.GetBlockWithTxsRequest;
            };
            GetBlockWithTxsResponse: {
                encode(message: _71.GetBlockWithTxsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.GetBlockWithTxsResponse;
                fromPartial(object: {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _70.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                payer?: string;
                                granter?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    block?: {
                        header?: {
                            version?: {
                                block?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                                app?: {
                                    high?: number;
                                    low?: number;
                                    unsigned?: boolean;
                                    add?: (addend: string | number | import("long")) => import("long");
                                    and?: (other: string | number | import("long")) => import("long");
                                    compare?: (other: string | number | import("long")) => number;
                                    comp?: (other: string | number | import("long")) => number;
                                    divide?: (divisor: string | number | import("long")) => import("long");
                                    div?: (divisor: string | number | import("long")) => import("long");
                                    equals?: (other: string | number | import("long")) => boolean;
                                    eq?: (other: string | number | import("long")) => boolean;
                                    getHighBits?: () => number;
                                    getHighBitsUnsigned?: () => number;
                                    getLowBits?: () => number;
                                    getLowBitsUnsigned?: () => number;
                                    getNumBitsAbs?: () => number;
                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                    gt?: (other: string | number | import("long")) => boolean;
                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    gte?: (other: string | number | import("long")) => boolean;
                                    ge?: (other: string | number | import("long")) => boolean;
                                    isEven?: () => boolean;
                                    isNegative?: () => boolean;
                                    isOdd?: () => boolean;
                                    isPositive?: () => boolean;
                                    isZero?: () => boolean;
                                    eqz?: () => boolean;
                                    lessThan?: (other: string | number | import("long")) => boolean;
                                    lt?: (other: string | number | import("long")) => boolean;
                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                    lte?: (other: string | number | import("long")) => boolean;
                                    le?: (other: string | number | import("long")) => boolean;
                                    modulo?: (other: string | number | import("long")) => import("long");
                                    mod?: (other: string | number | import("long")) => import("long");
                                    rem?: (other: string | number | import("long")) => import("long");
                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                    negate?: () => import("long");
                                    neg?: () => import("long");
                                    not?: () => import("long");
                                    countLeadingZeros?: () => number;
                                    clz?: () => number;
                                    countTrailingZeros?: () => number;
                                    ctz?: () => number;
                                    notEquals?: (other: string | number | import("long")) => boolean;
                                    neq?: (other: string | number | import("long")) => boolean;
                                    ne?: (other: string | number | import("long")) => boolean;
                                    or?: (other: string | number | import("long")) => import("long");
                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                    shl?: (numBits: number | import("long")) => import("long");
                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                    shr?: (numBits: number | import("long")) => import("long");
                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                    shru?: (numBits: number | import("long")) => import("long");
                                    shr_u?: (numBits: number | import("long")) => import("long");
                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                    rotl?: (numBits: number | import("long")) => import("long");
                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                    rotr?: (numBits: number | import("long")) => import("long");
                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                    toInt?: () => number;
                                    toNumber?: () => number;
                                    toBytes?: (le?: boolean) => number[];
                                    toBytesLE?: () => number[];
                                    toBytesBE?: () => number[];
                                    toSigned?: () => import("long");
                                    toString?: (radix?: number) => string;
                                    toUnsigned?: () => import("long");
                                    xor?: (other: string | number | import("long")) => import("long");
                                };
                            };
                            chainId?: string;
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        data?: {
                            txs?: Uint8Array[];
                        };
                        evidence?: {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    validatorPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                    app?: {
                                                        high?: number;
                                                        low?: number;
                                                        unsigned?: boolean;
                                                        add?: (addend: string | number | import("long")) => import("long");
                                                        and?: (other: string | number | import("long")) => import("long");
                                                        compare?: (other: string | number | import("long")) => number;
                                                        comp?: (other: string | number | import("long")) => number;
                                                        divide?: (divisor: string | number | import("long")) => import("long");
                                                        div?: (divisor: string | number | import("long")) => import("long");
                                                        equals?: (other: string | number | import("long")) => boolean;
                                                        eq?: (other: string | number | import("long")) => boolean;
                                                        getHighBits?: () => number;
                                                        getHighBitsUnsigned?: () => number;
                                                        getLowBits?: () => number;
                                                        getLowBitsUnsigned?: () => number;
                                                        getNumBitsAbs?: () => number;
                                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                                        gt?: (other: string | number | import("long")) => boolean;
                                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        gte?: (other: string | number | import("long")) => boolean;
                                                        ge?: (other: string | number | import("long")) => boolean;
                                                        isEven?: () => boolean;
                                                        isNegative?: () => boolean;
                                                        isOdd?: () => boolean;
                                                        isPositive?: () => boolean;
                                                        isZero?: () => boolean;
                                                        eqz?: () => boolean;
                                                        lessThan?: (other: string | number | import("long")) => boolean;
                                                        lt?: (other: string | number | import("long")) => boolean;
                                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                        lte?: (other: string | number | import("long")) => boolean;
                                                        le?: (other: string | number | import("long")) => boolean;
                                                        modulo?: (other: string | number | import("long")) => import("long");
                                                        mod?: (other: string | number | import("long")) => import("long");
                                                        rem?: (other: string | number | import("long")) => import("long");
                                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                                        negate?: () => import("long");
                                                        neg?: () => import("long");
                                                        not?: () => import("long");
                                                        countLeadingZeros?: () => number;
                                                        clz?: () => number;
                                                        countTrailingZeros?: () => number;
                                                        ctz?: () => number;
                                                        notEquals?: (other: string | number | import("long")) => boolean;
                                                        neq?: (other: string | number | import("long")) => boolean;
                                                        ne?: (other: string | number | import("long")) => boolean;
                                                        or?: (other: string | number | import("long")) => import("long");
                                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                                        shl?: (numBits: number | import("long")) => import("long");
                                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                                        shr?: (numBits: number | import("long")) => import("long");
                                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                        shru?: (numBits: number | import("long")) => import("long");
                                                        shr_u?: (numBits: number | import("long")) => import("long");
                                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                                        rotl?: (numBits: number | import("long")) => import("long");
                                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                                        rotr?: (numBits: number | import("long")) => import("long");
                                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                                        toInt?: () => number;
                                                        toNumber?: () => number;
                                                        toBytes?: (le?: boolean) => number[];
                                                        toBytesLE?: () => number[];
                                                        toBytesBE?: () => number[];
                                                        toSigned?: () => import("long");
                                                        toString?: (radix?: number) => string;
                                                        toUnsigned?: () => import("long");
                                                        xor?: (other: string | number | import("long")) => import("long");
                                                    };
                                                };
                                                chainId?: string;
                                                height?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                                proposerPriority?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                                proposerPriority?: {
                                                    high?: number;
                                                    low?: number;
                                                    unsigned?: boolean;
                                                    add?: (addend: string | number | import("long")) => import("long");
                                                    and?: (other: string | number | import("long")) => import("long");
                                                    compare?: (other: string | number | import("long")) => number;
                                                    comp?: (other: string | number | import("long")) => number;
                                                    divide?: (divisor: string | number | import("long")) => import("long");
                                                    div?: (divisor: string | number | import("long")) => import("long");
                                                    equals?: (other: string | number | import("long")) => boolean;
                                                    eq?: (other: string | number | import("long")) => boolean;
                                                    getHighBits?: () => number;
                                                    getHighBitsUnsigned?: () => number;
                                                    getLowBits?: () => number;
                                                    getLowBitsUnsigned?: () => number;
                                                    getNumBitsAbs?: () => number;
                                                    greaterThan?: (other: string | number | import("long")) => boolean;
                                                    gt?: (other: string | number | import("long")) => boolean;
                                                    greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    gte?: (other: string | number | import("long")) => boolean;
                                                    ge?: (other: string | number | import("long")) => boolean;
                                                    isEven?: () => boolean;
                                                    isNegative?: () => boolean;
                                                    isOdd?: () => boolean;
                                                    isPositive?: () => boolean;
                                                    isZero?: () => boolean;
                                                    eqz?: () => boolean;
                                                    lessThan?: (other: string | number | import("long")) => boolean;
                                                    lt?: (other: string | number | import("long")) => boolean;
                                                    lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                    lte?: (other: string | number | import("long")) => boolean;
                                                    le?: (other: string | number | import("long")) => boolean;
                                                    modulo?: (other: string | number | import("long")) => import("long");
                                                    mod?: (other: string | number | import("long")) => import("long");
                                                    rem?: (other: string | number | import("long")) => import("long");
                                                    multiply?: (multiplier: string | number | import("long")) => import("long");
                                                    mul?: (multiplier: string | number | import("long")) => import("long");
                                                    negate?: () => import("long");
                                                    neg?: () => import("long");
                                                    not?: () => import("long");
                                                    countLeadingZeros?: () => number;
                                                    clz?: () => number;
                                                    countTrailingZeros?: () => number;
                                                    ctz?: () => number;
                                                    notEquals?: (other: string | number | import("long")) => boolean;
                                                    neq?: (other: string | number | import("long")) => boolean;
                                                    ne?: (other: string | number | import("long")) => boolean;
                                                    or?: (other: string | number | import("long")) => import("long");
                                                    shiftLeft?: (numBits: number | import("long")) => import("long");
                                                    shl?: (numBits: number | import("long")) => import("long");
                                                    shiftRight?: (numBits: number | import("long")) => import("long");
                                                    shr?: (numBits: number | import("long")) => import("long");
                                                    shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                    shru?: (numBits: number | import("long")) => import("long");
                                                    shr_u?: (numBits: number | import("long")) => import("long");
                                                    rotateLeft?: (numBits: number | import("long")) => import("long");
                                                    rotl?: (numBits: number | import("long")) => import("long");
                                                    rotateRight?: (numBits: number | import("long")) => import("long");
                                                    rotr?: (numBits: number | import("long")) => import("long");
                                                    subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                    sub?: (subtrahend: string | number | import("long")) => import("long");
                                                    toInt?: () => number;
                                                    toNumber?: () => number;
                                                    toBytes?: (le?: boolean) => number[];
                                                    toBytesLE?: () => number[];
                                                    toBytesBE?: () => number[];
                                                    toSigned?: () => import("long");
                                                    toString?: (radix?: number) => string;
                                                    toUnsigned?: () => import("long");
                                                    xor?: (other: string | number | import("long")) => import("long");
                                                };
                                            };
                                            totalVotingPower?: {
                                                high?: number;
                                                low?: number;
                                                unsigned?: boolean;
                                                add?: (addend: string | number | import("long")) => import("long");
                                                and?: (other: string | number | import("long")) => import("long");
                                                compare?: (other: string | number | import("long")) => number;
                                                comp?: (other: string | number | import("long")) => number;
                                                divide?: (divisor: string | number | import("long")) => import("long");
                                                div?: (divisor: string | number | import("long")) => import("long");
                                                equals?: (other: string | number | import("long")) => boolean;
                                                eq?: (other: string | number | import("long")) => boolean;
                                                getHighBits?: () => number;
                                                getHighBitsUnsigned?: () => number;
                                                getLowBits?: () => number;
                                                getLowBitsUnsigned?: () => number;
                                                getNumBitsAbs?: () => number;
                                                greaterThan?: (other: string | number | import("long")) => boolean;
                                                gt?: (other: string | number | import("long")) => boolean;
                                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                gte?: (other: string | number | import("long")) => boolean;
                                                ge?: (other: string | number | import("long")) => boolean;
                                                isEven?: () => boolean;
                                                isNegative?: () => boolean;
                                                isOdd?: () => boolean;
                                                isPositive?: () => boolean;
                                                isZero?: () => boolean;
                                                eqz?: () => boolean;
                                                lessThan?: (other: string | number | import("long")) => boolean;
                                                lt?: (other: string | number | import("long")) => boolean;
                                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                                lte?: (other: string | number | import("long")) => boolean;
                                                le?: (other: string | number | import("long")) => boolean;
                                                modulo?: (other: string | number | import("long")) => import("long");
                                                mod?: (other: string | number | import("long")) => import("long");
                                                rem?: (other: string | number | import("long")) => import("long");
                                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                                mul?: (multiplier: string | number | import("long")) => import("long");
                                                negate?: () => import("long");
                                                neg?: () => import("long");
                                                not?: () => import("long");
                                                countLeadingZeros?: () => number;
                                                clz?: () => number;
                                                countTrailingZeros?: () => number;
                                                ctz?: () => number;
                                                notEquals?: (other: string | number | import("long")) => boolean;
                                                neq?: (other: string | number | import("long")) => boolean;
                                                ne?: (other: string | number | import("long")) => boolean;
                                                or?: (other: string | number | import("long")) => import("long");
                                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                                shl?: (numBits: number | import("long")) => import("long");
                                                shiftRight?: (numBits: number | import("long")) => import("long");
                                                shr?: (numBits: number | import("long")) => import("long");
                                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                                shru?: (numBits: number | import("long")) => import("long");
                                                shr_u?: (numBits: number | import("long")) => import("long");
                                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                                rotl?: (numBits: number | import("long")) => import("long");
                                                rotateRight?: (numBits: number | import("long")) => import("long");
                                                rotr?: (numBits: number | import("long")) => import("long");
                                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                                toInt?: () => number;
                                                toNumber?: () => number;
                                                toBytes?: (le?: boolean) => number[];
                                                toBytesLE?: () => number[];
                                                toBytesBE?: () => number[];
                                                toSigned?: () => import("long");
                                                toString?: (radix?: number) => string;
                                                toUnsigned?: () => import("long");
                                                xor?: (other: string | number | import("long")) => import("long");
                                            };
                                        };
                                    };
                                    commonHeight?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                        proposerPriority?: {
                                            high?: number;
                                            low?: number;
                                            unsigned?: boolean;
                                            add?: (addend: string | number | import("long")) => import("long");
                                            and?: (other: string | number | import("long")) => import("long");
                                            compare?: (other: string | number | import("long")) => number;
                                            comp?: (other: string | number | import("long")) => number;
                                            divide?: (divisor: string | number | import("long")) => import("long");
                                            div?: (divisor: string | number | import("long")) => import("long");
                                            equals?: (other: string | number | import("long")) => boolean;
                                            eq?: (other: string | number | import("long")) => boolean;
                                            getHighBits?: () => number;
                                            getHighBitsUnsigned?: () => number;
                                            getLowBits?: () => number;
                                            getLowBitsUnsigned?: () => number;
                                            getNumBitsAbs?: () => number;
                                            greaterThan?: (other: string | number | import("long")) => boolean;
                                            gt?: (other: string | number | import("long")) => boolean;
                                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            gte?: (other: string | number | import("long")) => boolean;
                                            ge?: (other: string | number | import("long")) => boolean;
                                            isEven?: () => boolean;
                                            isNegative?: () => boolean;
                                            isOdd?: () => boolean;
                                            isPositive?: () => boolean;
                                            isZero?: () => boolean;
                                            eqz?: () => boolean;
                                            lessThan?: (other: string | number | import("long")) => boolean;
                                            lt?: (other: string | number | import("long")) => boolean;
                                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                            lte?: (other: string | number | import("long")) => boolean;
                                            le?: (other: string | number | import("long")) => boolean;
                                            modulo?: (other: string | number | import("long")) => import("long");
                                            mod?: (other: string | number | import("long")) => import("long");
                                            rem?: (other: string | number | import("long")) => import("long");
                                            multiply?: (multiplier: string | number | import("long")) => import("long");
                                            mul?: (multiplier: string | number | import("long")) => import("long");
                                            negate?: () => import("long");
                                            neg?: () => import("long");
                                            not?: () => import("long");
                                            countLeadingZeros?: () => number;
                                            clz?: () => number;
                                            countTrailingZeros?: () => number;
                                            ctz?: () => number;
                                            notEquals?: (other: string | number | import("long")) => boolean;
                                            neq?: (other: string | number | import("long")) => boolean;
                                            ne?: (other: string | number | import("long")) => boolean;
                                            or?: (other: string | number | import("long")) => import("long");
                                            shiftLeft?: (numBits: number | import("long")) => import("long");
                                            shl?: (numBits: number | import("long")) => import("long");
                                            shiftRight?: (numBits: number | import("long")) => import("long");
                                            shr?: (numBits: number | import("long")) => import("long");
                                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                            shru?: (numBits: number | import("long")) => import("long");
                                            shr_u?: (numBits: number | import("long")) => import("long");
                                            rotateLeft?: (numBits: number | import("long")) => import("long");
                                            rotl?: (numBits: number | import("long")) => import("long");
                                            rotateRight?: (numBits: number | import("long")) => import("long");
                                            rotr?: (numBits: number | import("long")) => import("long");
                                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                                            sub?: (subtrahend: string | number | import("long")) => import("long");
                                            toInt?: () => number;
                                            toNumber?: () => number;
                                            toBytes?: (le?: boolean) => number[];
                                            toBytesLE?: () => number[];
                                            toBytesBE?: () => number[];
                                            toSigned?: () => import("long");
                                            toString?: (radix?: number) => string;
                                            toUnsigned?: () => import("long");
                                            xor?: (other: string | number | import("long")) => import("long");
                                        };
                                    }[];
                                    totalVotingPower?: {
                                        high?: number;
                                        low?: number;
                                        unsigned?: boolean;
                                        add?: (addend: string | number | import("long")) => import("long");
                                        and?: (other: string | number | import("long")) => import("long");
                                        compare?: (other: string | number | import("long")) => number;
                                        comp?: (other: string | number | import("long")) => number;
                                        divide?: (divisor: string | number | import("long")) => import("long");
                                        div?: (divisor: string | number | import("long")) => import("long");
                                        equals?: (other: string | number | import("long")) => boolean;
                                        eq?: (other: string | number | import("long")) => boolean;
                                        getHighBits?: () => number;
                                        getHighBitsUnsigned?: () => number;
                                        getLowBits?: () => number;
                                        getLowBitsUnsigned?: () => number;
                                        getNumBitsAbs?: () => number;
                                        greaterThan?: (other: string | number | import("long")) => boolean;
                                        gt?: (other: string | number | import("long")) => boolean;
                                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        gte?: (other: string | number | import("long")) => boolean;
                                        ge?: (other: string | number | import("long")) => boolean;
                                        isEven?: () => boolean;
                                        isNegative?: () => boolean;
                                        isOdd?: () => boolean;
                                        isPositive?: () => boolean;
                                        isZero?: () => boolean;
                                        eqz?: () => boolean;
                                        lessThan?: (other: string | number | import("long")) => boolean;
                                        lt?: (other: string | number | import("long")) => boolean;
                                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                        lte?: (other: string | number | import("long")) => boolean;
                                        le?: (other: string | number | import("long")) => boolean;
                                        modulo?: (other: string | number | import("long")) => import("long");
                                        mod?: (other: string | number | import("long")) => import("long");
                                        rem?: (other: string | number | import("long")) => import("long");
                                        multiply?: (multiplier: string | number | import("long")) => import("long");
                                        mul?: (multiplier: string | number | import("long")) => import("long");
                                        negate?: () => import("long");
                                        neg?: () => import("long");
                                        not?: () => import("long");
                                        countLeadingZeros?: () => number;
                                        clz?: () => number;
                                        countTrailingZeros?: () => number;
                                        ctz?: () => number;
                                        notEquals?: (other: string | number | import("long")) => boolean;
                                        neq?: (other: string | number | import("long")) => boolean;
                                        ne?: (other: string | number | import("long")) => boolean;
                                        or?: (other: string | number | import("long")) => import("long");
                                        shiftLeft?: (numBits: number | import("long")) => import("long");
                                        shl?: (numBits: number | import("long")) => import("long");
                                        shiftRight?: (numBits: number | import("long")) => import("long");
                                        shr?: (numBits: number | import("long")) => import("long");
                                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                        shru?: (numBits: number | import("long")) => import("long");
                                        shr_u?: (numBits: number | import("long")) => import("long");
                                        rotateLeft?: (numBits: number | import("long")) => import("long");
                                        rotl?: (numBits: number | import("long")) => import("long");
                                        rotateRight?: (numBits: number | import("long")) => import("long");
                                        rotr?: (numBits: number | import("long")) => import("long");
                                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                                        sub?: (subtrahend: string | number | import("long")) => import("long");
                                        toInt?: () => number;
                                        toNumber?: () => number;
                                        toBytes?: (le?: boolean) => number[];
                                        toBytesLE?: () => number[];
                                        toBytesBE?: () => number[];
                                        toSigned?: () => import("long");
                                        toString?: (radix?: number) => string;
                                        toUnsigned?: () => import("long");
                                        xor?: (other: string | number | import("long")) => import("long");
                                    };
                                    timestamp?: Date;
                                };
                            }[];
                        };
                        lastCommit?: {
                            height?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    };
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _71.GetBlockWithTxsResponse;
            };
        };
    }
    namespace upgrade {
        const v1beta1: {
            QueryClientImpl: typeof _199.QueryClientImpl;
            createRpcQueryExtension: (base: import("@cosmjs/stargate").QueryClient) => {
                currentPlan(request?: _73.QueryCurrentPlanRequest): Promise<_73.QueryCurrentPlanResponse>;
                appliedPlan(request: _73.QueryAppliedPlanRequest): Promise<_73.QueryAppliedPlanResponse>;
                upgradedConsensusState(request: _73.QueryUpgradedConsensusStateRequest): Promise<_73.QueryUpgradedConsensusStateResponse>;
                moduleVersions(request: _73.QueryModuleVersionsRequest): Promise<_73.QueryModuleVersionsResponse>;
            };
            LCDQueryClient: typeof _184.LCDQueryClient;
            Plan: {
                encode(message: _74.Plan, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.Plan;
                fromPartial(object: {
                    name?: string;
                    time?: Date;
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    info?: string;
                    upgradedClientState?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                }): _74.Plan;
            };
            SoftwareUpgradeProposal: {
                encode(message: _74.SoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.SoftwareUpgradeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _74.SoftwareUpgradeProposal;
            };
            CancelSoftwareUpgradeProposal: {
                encode(message: _74.CancelSoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.CancelSoftwareUpgradeProposal;
                fromPartial(object: {
                    title?: string;
                    description?: string;
                }): _74.CancelSoftwareUpgradeProposal;
            };
            ModuleVersion: {
                encode(message: _74.ModuleVersion, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.ModuleVersion;
                fromPartial(object: {
                    name?: string;
                    version?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _74.ModuleVersion;
            };
            QueryCurrentPlanRequest: {
                encode(_: _73.QueryCurrentPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryCurrentPlanRequest;
                fromPartial(_: {}): _73.QueryCurrentPlanRequest;
            };
            QueryCurrentPlanResponse: {
                encode(message: _73.QueryCurrentPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryCurrentPlanResponse;
                fromPartial(object: {
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                }): _73.QueryCurrentPlanResponse;
            };
            QueryAppliedPlanRequest: {
                encode(message: _73.QueryAppliedPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryAppliedPlanRequest;
                fromPartial(object: {
                    name?: string;
                }): _73.QueryAppliedPlanRequest;
            };
            QueryAppliedPlanResponse: {
                encode(message: _73.QueryAppliedPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryAppliedPlanResponse;
                fromPartial(object: {
                    height?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _73.QueryAppliedPlanResponse;
            };
            QueryUpgradedConsensusStateRequest: {
                encode(message: _73.QueryUpgradedConsensusStateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryUpgradedConsensusStateRequest;
                fromPartial(object: {
                    lastHeight?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _73.QueryUpgradedConsensusStateRequest;
            };
            QueryUpgradedConsensusStateResponse: {
                encode(message: _73.QueryUpgradedConsensusStateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryUpgradedConsensusStateResponse;
                fromPartial(object: {
                    upgradedConsensusState?: Uint8Array;
                }): _73.QueryUpgradedConsensusStateResponse;
            };
            QueryModuleVersionsRequest: {
                encode(message: _73.QueryModuleVersionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryModuleVersionsRequest;
                fromPartial(object: {
                    moduleName?: string;
                }): _73.QueryModuleVersionsRequest;
            };
            QueryModuleVersionsResponse: {
                encode(message: _73.QueryModuleVersionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.QueryModuleVersionsResponse;
                fromPartial(object: {
                    moduleVersions?: {
                        name?: string;
                        version?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    }[];
                }): _73.QueryModuleVersionsResponse;
            };
        };
    }
    namespace vesting {
        const v1beta1: {
            MsgClientImpl: typeof _209.MsgClientImpl;
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createVestingAccount(value: _75.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createVestingAccount(value: _75.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _75.MsgCreateVestingAccount;
                    };
                };
                fromPartial: {
                    createVestingAccount(value: _75.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _75.MsgCreateVestingAccount;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount, endTime, delayed }: _75.MsgCreateVestingAccount) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    };
                    fromAmino: ({ from_address, to_address, amount, end_time, delayed }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    }) => _75.MsgCreateVestingAccount;
                };
            };
            BaseVestingAccount: {
                encode(message: _76.BaseVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.BaseVestingAccount;
                fromPartial(object: {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        sequence?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    originalVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedFree?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _76.BaseVestingAccount;
            };
            ContinuousVestingAccount: {
                encode(message: _76.ContinuousVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.ContinuousVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    startTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                }): _76.ContinuousVestingAccount;
            };
            DelayedVestingAccount: {
                encode(message: _76.DelayedVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.DelayedVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _76.DelayedVestingAccount;
            };
            Period: {
                encode(message: _76.Period, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.Period;
                fromPartial(object: {
                    length?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                }): _76.Period;
            };
            PeriodicVestingAccount: {
                encode(message: _76.PeriodicVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.PeriodicVestingAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                    startTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    vestingPeriods?: {
                        length?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                }): _76.PeriodicVestingAccount;
            };
            PermanentLockedAccount: {
                encode(message: _76.PermanentLockedAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.PermanentLockedAccount;
                fromPartial(object: {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                            sequence?: {
                                high?: number;
                                low?: number;
                                unsigned?: boolean;
                                add?: (addend: string | number | import("long")) => import("long");
                                and?: (other: string | number | import("long")) => import("long");
                                compare?: (other: string | number | import("long")) => number;
                                comp?: (other: string | number | import("long")) => number;
                                divide?: (divisor: string | number | import("long")) => import("long");
                                div?: (divisor: string | number | import("long")) => import("long");
                                equals?: (other: string | number | import("long")) => boolean;
                                eq?: (other: string | number | import("long")) => boolean;
                                getHighBits?: () => number;
                                getHighBitsUnsigned?: () => number;
                                getLowBits?: () => number;
                                getLowBitsUnsigned?: () => number;
                                getNumBitsAbs?: () => number;
                                greaterThan?: (other: string | number | import("long")) => boolean;
                                gt?: (other: string | number | import("long")) => boolean;
                                greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                                gte?: (other: string | number | import("long")) => boolean;
                                ge?: (other: string | number | import("long")) => boolean;
                                isEven?: () => boolean;
                                isNegative?: () => boolean;
                                isOdd?: () => boolean;
                                isPositive?: () => boolean;
                                isZero?: () => boolean;
                                eqz?: () => boolean;
                                lessThan?: (other: string | number | import("long")) => boolean;
                                lt?: (other: string | number | import("long")) => boolean;
                                lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                                lte?: (other: string | number | import("long")) => boolean;
                                le?: (other: string | number | import("long")) => boolean;
                                modulo?: (other: string | number | import("long")) => import("long");
                                mod?: (other: string | number | import("long")) => import("long");
                                rem?: (other: string | number | import("long")) => import("long");
                                multiply?: (multiplier: string | number | import("long")) => import("long");
                                mul?: (multiplier: string | number | import("long")) => import("long");
                                negate?: () => import("long");
                                neg?: () => import("long");
                                not?: () => import("long");
                                countLeadingZeros?: () => number;
                                clz?: () => number;
                                countTrailingZeros?: () => number;
                                ctz?: () => number;
                                notEquals?: (other: string | number | import("long")) => boolean;
                                neq?: (other: string | number | import("long")) => boolean;
                                ne?: (other: string | number | import("long")) => boolean;
                                or?: (other: string | number | import("long")) => import("long");
                                shiftLeft?: (numBits: number | import("long")) => import("long");
                                shl?: (numBits: number | import("long")) => import("long");
                                shiftRight?: (numBits: number | import("long")) => import("long");
                                shr?: (numBits: number | import("long")) => import("long");
                                shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                                shru?: (numBits: number | import("long")) => import("long");
                                shr_u?: (numBits: number | import("long")) => import("long");
                                rotateLeft?: (numBits: number | import("long")) => import("long");
                                rotl?: (numBits: number | import("long")) => import("long");
                                rotateRight?: (numBits: number | import("long")) => import("long");
                                rotr?: (numBits: number | import("long")) => import("long");
                                subtract?: (subtrahend: string | number | import("long")) => import("long");
                                sub?: (subtrahend: string | number | import("long")) => import("long");
                                toInt?: () => number;
                                toNumber?: () => number;
                                toBytes?: (le?: boolean) => number[];
                                toBytesLE?: () => number[];
                                toBytesBE?: () => number[];
                                toSigned?: () => import("long");
                                toString?: (radix?: number) => string;
                                toUnsigned?: () => import("long");
                                xor?: (other: string | number | import("long")) => import("long");
                            };
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: {
                            high?: number;
                            low?: number;
                            unsigned?: boolean;
                            add?: (addend: string | number | import("long")) => import("long");
                            and?: (other: string | number | import("long")) => import("long");
                            compare?: (other: string | number | import("long")) => number;
                            comp?: (other: string | number | import("long")) => number;
                            divide?: (divisor: string | number | import("long")) => import("long");
                            div?: (divisor: string | number | import("long")) => import("long");
                            equals?: (other: string | number | import("long")) => boolean;
                            eq?: (other: string | number | import("long")) => boolean;
                            getHighBits?: () => number;
                            getHighBitsUnsigned?: () => number;
                            getLowBits?: () => number;
                            getLowBitsUnsigned?: () => number;
                            getNumBitsAbs?: () => number;
                            greaterThan?: (other: string | number | import("long")) => boolean;
                            gt?: (other: string | number | import("long")) => boolean;
                            greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                            gte?: (other: string | number | import("long")) => boolean;
                            ge?: (other: string | number | import("long")) => boolean;
                            isEven?: () => boolean;
                            isNegative?: () => boolean;
                            isOdd?: () => boolean;
                            isPositive?: () => boolean;
                            isZero?: () => boolean;
                            eqz?: () => boolean;
                            lessThan?: (other: string | number | import("long")) => boolean;
                            lt?: (other: string | number | import("long")) => boolean;
                            lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                            lte?: (other: string | number | import("long")) => boolean;
                            le?: (other: string | number | import("long")) => boolean;
                            modulo?: (other: string | number | import("long")) => import("long");
                            mod?: (other: string | number | import("long")) => import("long");
                            rem?: (other: string | number | import("long")) => import("long");
                            multiply?: (multiplier: string | number | import("long")) => import("long");
                            mul?: (multiplier: string | number | import("long")) => import("long");
                            negate?: () => import("long");
                            neg?: () => import("long");
                            not?: () => import("long");
                            countLeadingZeros?: () => number;
                            clz?: () => number;
                            countTrailingZeros?: () => number;
                            ctz?: () => number;
                            notEquals?: (other: string | number | import("long")) => boolean;
                            neq?: (other: string | number | import("long")) => boolean;
                            ne?: (other: string | number | import("long")) => boolean;
                            or?: (other: string | number | import("long")) => import("long");
                            shiftLeft?: (numBits: number | import("long")) => import("long");
                            shl?: (numBits: number | import("long")) => import("long");
                            shiftRight?: (numBits: number | import("long")) => import("long");
                            shr?: (numBits: number | import("long")) => import("long");
                            shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                            shru?: (numBits: number | import("long")) => import("long");
                            shr_u?: (numBits: number | import("long")) => import("long");
                            rotateLeft?: (numBits: number | import("long")) => import("long");
                            rotl?: (numBits: number | import("long")) => import("long");
                            rotateRight?: (numBits: number | import("long")) => import("long");
                            rotr?: (numBits: number | import("long")) => import("long");
                            subtract?: (subtrahend: string | number | import("long")) => import("long");
                            sub?: (subtrahend: string | number | import("long")) => import("long");
                            toInt?: () => number;
                            toNumber?: () => number;
                            toBytes?: (le?: boolean) => number[];
                            toBytesLE?: () => number[];
                            toBytesBE?: () => number[];
                            toSigned?: () => import("long");
                            toString?: (radix?: number) => string;
                            toUnsigned?: () => import("long");
                            xor?: (other: string | number | import("long")) => import("long");
                        };
                    };
                }): _76.PermanentLockedAccount;
            };
            MsgCreateVestingAccount: {
                encode(message: _75.MsgCreateVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.MsgCreateVestingAccount;
                fromPartial(object: {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: {
                        high?: number;
                        low?: number;
                        unsigned?: boolean;
                        add?: (addend: string | number | import("long")) => import("long");
                        and?: (other: string | number | import("long")) => import("long");
                        compare?: (other: string | number | import("long")) => number;
                        comp?: (other: string | number | import("long")) => number;
                        divide?: (divisor: string | number | import("long")) => import("long");
                        div?: (divisor: string | number | import("long")) => import("long");
                        equals?: (other: string | number | import("long")) => boolean;
                        eq?: (other: string | number | import("long")) => boolean;
                        getHighBits?: () => number;
                        getHighBitsUnsigned?: () => number;
                        getLowBits?: () => number;
                        getLowBitsUnsigned?: () => number;
                        getNumBitsAbs?: () => number;
                        greaterThan?: (other: string | number | import("long")) => boolean;
                        gt?: (other: string | number | import("long")) => boolean;
                        greaterThanOrEqual?: (other: string | number | import("long")) => boolean;
                        gte?: (other: string | number | import("long")) => boolean;
                        ge?: (other: string | number | import("long")) => boolean;
                        isEven?: () => boolean;
                        isNegative?: () => boolean;
                        isOdd?: () => boolean;
                        isPositive?: () => boolean;
                        isZero?: () => boolean;
                        eqz?: () => boolean;
                        lessThan?: (other: string | number | import("long")) => boolean;
                        lt?: (other: string | number | import("long")) => boolean;
                        lessThanOrEqual?: (other: string | number | import("long")) => boolean;
                        lte?: (other: string | number | import("long")) => boolean;
                        le?: (other: string | number | import("long")) => boolean;
                        modulo?: (other: string | number | import("long")) => import("long");
                        mod?: (other: string | number | import("long")) => import("long");
                        rem?: (other: string | number | import("long")) => import("long");
                        multiply?: (multiplier: string | number | import("long")) => import("long");
                        mul?: (multiplier: string | number | import("long")) => import("long");
                        negate?: () => import("long");
                        neg?: () => import("long");
                        not?: () => import("long");
                        countLeadingZeros?: () => number;
                        clz?: () => number;
                        countTrailingZeros?: () => number;
                        ctz?: () => number;
                        notEquals?: (other: string | number | import("long")) => boolean;
                        neq?: (other: string | number | import("long")) => boolean;
                        ne?: (other: string | number | import("long")) => boolean;
                        or?: (other: string | number | import("long")) => import("long");
                        shiftLeft?: (numBits: number | import("long")) => import("long");
                        shl?: (numBits: number | import("long")) => import("long");
                        shiftRight?: (numBits: number | import("long")) => import("long");
                        shr?: (numBits: number | import("long")) => import("long");
                        shiftRightUnsigned?: (numBits: number | import("long")) => import("long");
                        shru?: (numBits: number | import("long")) => import("long");
                        shr_u?: (numBits: number | import("long")) => import("long");
                        rotateLeft?: (numBits: number | import("long")) => import("long");
                        rotl?: (numBits: number | import("long")) => import("long");
                        rotateRight?: (numBits: number | import("long")) => import("long");
                        rotr?: (numBits: number | import("long")) => import("long");
                        subtract?: (subtrahend: string | number | import("long")) => import("long");
                        sub?: (subtrahend: string | number | import("long")) => import("long");
                        toInt?: () => number;
                        toNumber?: () => number;
                        toBytes?: (le?: boolean) => number[];
                        toBytesLE?: () => number[];
                        toBytesBE?: () => number[];
                        toSigned?: () => import("long");
                        toString?: (radix?: number) => string;
                        toUnsigned?: () => import("long");
                        xor?: (other: string | number | import("long")) => import("long");
                    };
                    delayed?: boolean;
                }): _75.MsgCreateVestingAccount;
            };
            MsgCreateVestingAccountResponse: {
                encode(_: _75.MsgCreateVestingAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.MsgCreateVestingAccountResponse;
                fromPartial(_: {}): _75.MsgCreateVestingAccountResponse;
            };
        };
    }
    const ClientFactory: {
        createRPCMsgClient: ({ rpc }: {
            rpc: import("@osmonauts/helpers").Rpc;
        }) => Promise<{
            cosmos: {
                authz: {
                    v1beta1: _200.MsgClientImpl;
                };
                bank: {
                    v1beta1: _201.MsgClientImpl;
                };
                crisis: {
                    v1beta1: _202.MsgClientImpl;
                };
                distribution: {
                    v1beta1: _203.MsgClientImpl;
                };
                evidence: {
                    v1beta1: _204.MsgClientImpl;
                };
                feegrant: {
                    v1beta1: _205.MsgClientImpl;
                };
                gov: {
                    v1beta1: _206.MsgClientImpl;
                };
                slashing: {
                    v1beta1: _207.MsgClientImpl;
                };
                staking: {
                    v1beta1: _208.MsgClientImpl;
                };
                vesting: {
                    v1beta1: _209.MsgClientImpl;
                };
            };
        }>;
        createRPCQueryClient: ({ rpcEndpoint }: {
            rpcEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: {
                        accounts(request?: _6.QueryAccountsRequest): Promise<_6.QueryAccountsResponse>;
                        account(request: _6.QueryAccountRequest): Promise<_6.QueryAccountResponse>;
                        params(request?: _6.QueryParamsRequest): Promise<_6.QueryParamsResponse>;
                        moduleAccountByName(request: _6.QueryModuleAccountByNameRequest): Promise<_6.QueryModuleAccountByNameResponse>;
                    };
                };
                authz: {
                    v1beta1: {
                        grants(request: _29.QueryGrantsRequest): Promise<_29.QueryGrantsResponse>;
                        granterGrants(request: _29.QueryGranterGrantsRequest): Promise<_29.QueryGranterGrantsResponse>;
                        granteeGrants(request: _29.QueryGranteeGrantsRequest): Promise<_29.QueryGranteeGrantsResponse>;
                    };
                };
                bank: {
                    v1beta1: {
                        balance(request: _34.QueryBalanceRequest): Promise<_34.QueryBalanceResponse>;
                        allBalances(request: _34.QueryAllBalancesRequest): Promise<_34.QueryAllBalancesResponse>;
                        spendableBalances(request: _34.QuerySpendableBalancesRequest): Promise<_34.QuerySpendableBalancesResponse>;
                        totalSupply(request?: _34.QueryTotalSupplyRequest): Promise<_34.QueryTotalSupplyResponse>;
                        supplyOf(request: _34.QuerySupplyOfRequest): Promise<_34.QuerySupplyOfResponse>;
                        params(request?: _34.QueryParamsRequest): Promise<_34.QueryParamsResponse>;
                        denomMetadata(request: _34.QueryDenomMetadataRequest): Promise<_34.QueryDenomMetadataResponse>;
                        denomsMetadata(request?: _34.QueryDenomsMetadataRequest): Promise<_34.QueryDenomsMetadataResponse>;
                    };
                };
                base: {
                    node: {
                        v1beta1: {
                            config(request?: _13.ConfigRequest): Promise<_13.ConfigResponse>;
                        };
                    };
                    tendermint: {
                        v1beta1: {
                            getNodeInfo(request?: _19.GetNodeInfoRequest): Promise<_19.GetNodeInfoResponse>;
                            getSyncing(request?: _19.GetSyncingRequest): Promise<_19.GetSyncingResponse>;
                            getLatestBlock(request?: _19.GetLatestBlockRequest): Promise<_19.GetLatestBlockResponse>;
                            getBlockByHeight(request: _19.GetBlockByHeightRequest): Promise<_19.GetBlockByHeightResponse>;
                            getLatestValidatorSet(request?: _19.GetLatestValidatorSetRequest): Promise<_19.GetLatestValidatorSetResponse>;
                            getValidatorSetByHeight(request: _19.GetValidatorSetByHeightRequest): Promise<_19.GetValidatorSetByHeightResponse>;
                        };
                    };
                };
                distribution: {
                    v1beta1: {
                        params(request?: _46.QueryParamsRequest): Promise<_46.QueryParamsResponse>;
                        validatorOutstandingRewards(request: _46.QueryValidatorOutstandingRewardsRequest): Promise<_46.QueryValidatorOutstandingRewardsResponse>;
                        validatorCommission(request: _46.QueryValidatorCommissionRequest): Promise<_46.QueryValidatorCommissionResponse>;
                        validatorSlashes(request: _46.QueryValidatorSlashesRequest): Promise<_46.QueryValidatorSlashesResponse>;
                        delegationRewards(request: _46.QueryDelegationRewardsRequest): Promise<_46.QueryDelegationRewardsResponse>;
                        delegationTotalRewards(request: _46.QueryDelegationTotalRewardsRequest): Promise<_46.QueryDelegationTotalRewardsResponse>;
                        delegatorValidators(request: _46.QueryDelegatorValidatorsRequest): Promise<_46.QueryDelegatorValidatorsResponse>;
                        delegatorWithdrawAddress(request: _46.QueryDelegatorWithdrawAddressRequest): Promise<_46.QueryDelegatorWithdrawAddressResponse>;
                        communityPool(request?: _46.QueryCommunityPoolRequest): Promise<_46.QueryCommunityPoolResponse>;
                        tokenizeShareRecordReward(request: _46.QueryTokenizeShareRecordRewardRequest): Promise<_46.QueryTokenizeShareRecordRewardResponse>;
                    };
                };
                evidence: {
                    v1beta1: {
                        evidence(request: _50.QueryEvidenceRequest): Promise<_50.QueryEvidenceResponse>;
                        allEvidence(request?: _50.QueryAllEvidenceRequest): Promise<_50.QueryAllEvidenceResponse>;
                    };
                };
                feegrant: {
                    v1beta1: {
                        allowance(request: _54.QueryAllowanceRequest): Promise<_54.QueryAllowanceResponse>;
                        allowances(request: _54.QueryAllowancesRequest): Promise<_54.QueryAllowancesResponse>;
                        allowancesByGranter(request: _54.QueryAllowancesByGranterRequest): Promise<_54.QueryAllowancesByGranterResponse>;
                    };
                };
                gov: {
                    v1beta1: {
                        proposal(request: _59.QueryProposalRequest): Promise<_59.QueryProposalResponse>;
                        proposals(request: _59.QueryProposalsRequest): Promise<_59.QueryProposalsResponse>;
                        vote(request: _59.QueryVoteRequest): Promise<_59.QueryVoteResponse>;
                        votes(request: _59.QueryVotesRequest): Promise<_59.QueryVotesResponse>;
                        params(request: _59.QueryParamsRequest): Promise<_59.QueryParamsResponse>;
                        deposit(request: _59.QueryDepositRequest): Promise<_59.QueryDepositResponse>;
                        deposits(request: _59.QueryDepositsRequest): Promise<_59.QueryDepositsResponse>;
                        tallyResult(request: _59.QueryTallyResultRequest): Promise<_59.QueryTallyResultResponse>;
                    };
                };
                mint: {
                    v1beta1: {
                        params(request?: _63.QueryParamsRequest): Promise<_63.QueryParamsResponse>;
                        inflation(request?: _63.QueryInflationRequest): Promise<_63.QueryInflationResponse>;
                        annualProvisions(request?: _63.QueryAnnualProvisionsRequest): Promise<_63.QueryAnnualProvisionsResponse>;
                    };
                };
                params: {
                    v1beta1: {
                        params(request: _65.QueryParamsRequest): Promise<_65.QueryParamsResponse>;
                    };
                };
                slashing: {
                    v1beta1: {
                        params(request?: _67.QueryParamsRequest): Promise<_67.QueryParamsResponse>;
                        signingInfo(request: _67.QuerySigningInfoRequest): Promise<_67.QuerySigningInfoResponse>;
                        signingInfos(request?: _67.QuerySigningInfosRequest): Promise<_67.QuerySigningInfosResponse>;
                    };
                };
                staking: {
                    v1beta1: {
                        validators(request: _23.QueryValidatorsRequest): Promise<_23.QueryValidatorsResponse>;
                        validator(request: _23.QueryValidatorRequest): Promise<_23.QueryValidatorResponse>;
                        validatorDelegations(request: _23.QueryValidatorDelegationsRequest): Promise<_23.QueryValidatorDelegationsResponse>;
                        validatorUnbondingDelegations(request: _23.QueryValidatorUnbondingDelegationsRequest): Promise<_23.QueryValidatorUnbondingDelegationsResponse>;
                        delegation(request: _23.QueryDelegationRequest): Promise<_23.QueryDelegationResponse>;
                        unbondingDelegation(request: _23.QueryUnbondingDelegationRequest): Promise<_23.QueryUnbondingDelegationResponse>;
                        delegatorDelegations(request: _23.QueryDelegatorDelegationsRequest): Promise<_23.QueryDelegatorDelegationsResponse>;
                        delegatorUnbondingDelegations(request: _23.QueryDelegatorUnbondingDelegationsRequest): Promise<_23.QueryDelegatorUnbondingDelegationsResponse>;
                        redelegations(request: _23.QueryRedelegationsRequest): Promise<_23.QueryRedelegationsResponse>;
                        delegatorValidators(request: _23.QueryDelegatorValidatorsRequest): Promise<_23.QueryDelegatorValidatorsResponse>;
                        delegatorValidator(request: _23.QueryDelegatorValidatorRequest): Promise<_23.QueryDelegatorValidatorResponse>;
                        historicalInfo(request: _23.QueryHistoricalInfoRequest): Promise<_23.QueryHistoricalInfoResponse>;
                        pool(request?: _23.QueryPoolRequest): Promise<_23.QueryPoolResponse>;
                        params(request?: _23.QueryParamsRequest): Promise<_23.QueryParamsResponse>;
                        tokenizeShareRecordById(request: _23.QueryTokenizeShareRecordByIdRequest): Promise<_23.QueryTokenizeShareRecordByIdResponse>;
                        tokenizeShareRecordByDenom(request: _23.QueryTokenizeShareRecordByDenomRequest): Promise<_23.QueryTokenizeShareRecordByDenomResponse>;
                        tokenizeShareRecordsOwned(request: _23.QueryTokenizeShareRecordsOwnedRequest): Promise<_23.QueryTokenizeShareRecordsOwnedResponse>;
                        allTokenizeShareRecords(request?: _23.QueryAllTokenizeShareRecordsRequest): Promise<_23.QueryAllTokenizeShareRecordsResponse>;
                        lastTokenizeShareRecordId(request?: _23.QueryLastTokenizeShareRecordIdRequest): Promise<_23.QueryLastTokenizeShareRecordIdResponse>;
                        totalTokenizeSharedAssets(request?: _23.QueryTotalTokenizeSharedAssetsRequest): Promise<_23.QueryTotalTokenizeSharedAssetsResponse>;
                        totalLiquidStaked(request?: _23.QueryTotalLiquidStaked): Promise<_23.QueryTotalLiquidStakedResponse>;
                        tokenizeShareLockInfo(request: _23.QueryTokenizeShareLockInfo): Promise<_23.QueryTokenizeShareLockInfoResponse>;
                    };
                };
                tx: {
                    v1beta1: {
                        simulate(request: _71.SimulateRequest): Promise<_71.SimulateResponse>;
                        getTx(request: _71.GetTxRequest): Promise<_71.GetTxResponse>;
                        broadcastTx(request: _71.BroadcastTxRequest): Promise<_71.BroadcastTxResponse>;
                        getTxsEvent(request: _71.GetTxsEventRequest): Promise<_71.GetTxsEventResponse>;
                        getBlockWithTxs(request: _71.GetBlockWithTxsRequest): Promise<_71.GetBlockWithTxsResponse>;
                    };
                };
                upgrade: {
                    v1beta1: {
                        currentPlan(request?: _73.QueryCurrentPlanRequest): Promise<_73.QueryCurrentPlanResponse>;
                        appliedPlan(request: _73.QueryAppliedPlanRequest): Promise<_73.QueryAppliedPlanResponse>;
                        upgradedConsensusState(request: _73.QueryUpgradedConsensusStateRequest): Promise<_73.QueryUpgradedConsensusStateResponse>;
                        moduleVersions(request: _73.QueryModuleVersionsRequest): Promise<_73.QueryModuleVersionsResponse>;
                    };
                };
            };
        }>;
        createLCDClient: ({ restEndpoint }: {
            restEndpoint: string;
        }) => Promise<{
            cosmos: {
                auth: {
                    v1beta1: _170.LCDQueryClient;
                };
                authz: {
                    v1beta1: _171.LCDQueryClient;
                };
                bank: {
                    v1beta1: _172.LCDQueryClient;
                };
                base: {
                    node: {
                        v1beta1: _173.LCDQueryClient;
                    };
                    tendermint: {
                        v1beta1: _174.LCDQueryClient;
                    };
                };
                distribution: {
                    v1beta1: _175.LCDQueryClient;
                };
                evidence: {
                    v1beta1: _176.LCDQueryClient;
                };
                feegrant: {
                    v1beta1: _177.LCDQueryClient;
                };
                gov: {
                    v1beta1: _178.LCDQueryClient;
                };
                mint: {
                    v1beta1: _179.LCDQueryClient;
                };
                params: {
                    v1beta1: _180.LCDQueryClient;
                };
                slashing: {
                    v1beta1: _181.LCDQueryClient;
                };
                staking: {
                    v1beta1: _182.LCDQueryClient;
                };
                tx: {
                    v1beta1: _183.LCDQueryClient;
                };
                upgrade: {
                    v1beta1: _184.LCDQueryClient;
                };
            };
        }>;
    };
}
